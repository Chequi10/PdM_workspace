
serie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08003260  08003260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003398  08003398  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033a0  080033a0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080033a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000080  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c19d  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cfd  00000000  00000000  0002c249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c8  00000000  00000000  0002df48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000710  00000000  00000000  0002e710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026061  00000000  00000000  0002ee20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b1f6  00000000  00000000  00054e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e32b8  00000000  00000000  00060077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014332f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000257c  00000000  00000000  00143384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003248 	.word	0x08003248

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08003248 	.word	0x08003248

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d10e      	bne.n	80005b6 <BSP_LED_Init+0x2e>
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <BSP_LED_Init+0x94>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	4a1e      	ldr	r2, [pc, #120]	; (800061c <BSP_LED_Init+0x94>)
 80005a2:	f043 0302 	orr.w	r3, r3, #2
 80005a6:	6313      	str	r3, [r2, #48]	; 0x30
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <BSP_LED_Init+0x94>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	f003 0302 	and.w	r3, r3, #2
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	e00d      	b.n	80005d2 <BSP_LED_Init+0x4a>
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <BSP_LED_Init+0x94>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <BSP_LED_Init+0x94>)
 80005c0:	f043 0302 	orr.w	r3, r3, #2
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <BSP_LED_Init+0x94>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <BSP_LED_Init+0x98>)
 80005d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80005e4:	2302      	movs	r3, #2
 80005e6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <BSP_LED_Init+0x9c>)
 80005ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f0:	f107 0214 	add.w	r2, r7, #20
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fac8 	bl	8000b8c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	4a09      	ldr	r2, [pc, #36]	; (8000624 <BSP_LED_Init+0x9c>)
 8000600:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <BSP_LED_Init+0x98>)
 8000608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800060c:	2200      	movs	r2, #0
 800060e:	4619      	mov	r1, r3
 8000610:	f000 fc68 	bl	8000ee4 <HAL_GPIO_WritePin>
}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	; 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	080032e0 	.word	0x080032e0
 8000624:	20000000 	.word	0x20000000

08000628 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <BSP_LED_On+0x2c>)
 8000636:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <BSP_LED_On+0x30>)
 800063e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	f000 fc4d 	bl	8000ee4 <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000
 8000658:	080032e0 	.word	0x080032e0

0800065c <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <BSP_LED_Toggle+0x2c>)
 800066a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4906      	ldr	r1, [pc, #24]	; (800068c <BSP_LED_Toggle+0x30>)
 8000672:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000676:	4619      	mov	r1, r3
 8000678:	4610      	mov	r0, r2
 800067a:	f000 fc4c 	bl	8000f16 <HAL_GPIO_TogglePin>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000000 	.word	0x20000000
 800068c:	080032e0 	.word	0x080032e0

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <SystemInit+0x60>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <SystemInit+0x60>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x64>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x64>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <SystemInit+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <SystemInit+0x64>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <SystemInit+0x64>)
 80006bc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <SystemInit+0x64>)
 80006c8:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <SystemInit+0x68>)
 80006ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <SystemInit+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <SystemInit+0x64>)
 80006d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <SystemInit+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <SystemInit+0x60>)
 80006e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006e4:	609a      	str	r2, [r3, #8]
#endif
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00
 80006f4:	40023800 	.word	0x40023800
 80006f8:	24003010 	.word	0x24003010

080006fc <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000750:	f000 f8f2 	bl	8000938 <HAL_IncTick>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	e00a      	b.n	8000780 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800076a:	f3af 8000 	nop.w
 800076e:	4601      	mov	r1, r0
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	60ba      	str	r2, [r7, #8]
 8000776:	b2ca      	uxtb	r2, r1
 8000778:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	429a      	cmp	r2, r3
 8000786:	dbf0      	blt.n	800076a <_read+0x12>
	}

return len;
 8000788:	687b      	ldr	r3, [r7, #4]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	60f8      	str	r0, [r7, #12]
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	e009      	b.n	80007b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	60ba      	str	r2, [r7, #8]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fccd 	bl	800214c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbf1      	blt.n	80007a4 <_write+0x12>
	}
	return len;
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_close>:

int _close(int file)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
	return -1;
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f2:	605a      	str	r2, [r3, #4]
	return 0;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <_isatty>:

int _isatty(int file)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
	return 1;
 800080a:	2301      	movs	r3, #1
}
 800080c:	4618      	mov	r0, r3
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
	return 0;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800083c:	4a14      	ldr	r2, [pc, #80]	; (8000890 <_sbrk+0x5c>)
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <_sbrk+0x60>)
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <_sbrk+0x64>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <_sbrk+0x64>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <_sbrk+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	429a      	cmp	r2, r3
 8000862:	d207      	bcs.n	8000874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000864:	f001 fd68 	bl	8002338 <__errno>
 8000868:	4603      	mov	r3, r0
 800086a:	220c      	movs	r2, #12
 800086c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000872:	e009      	b.n	8000888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <_sbrk+0x64>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <_sbrk+0x64>)
 8000884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000886:	68fb      	ldr	r3, [r7, #12]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20030000 	.word	0x20030000
 8000894:	00000400 	.word	0x00000400
 8000898:	20000098 	.word	0x20000098
 800089c:	20000100 	.word	0x20000100

080008a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_Init+0x34>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <HAL_Init+0x34>)
 80008aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ae:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_Init+0x34>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_Init+0x34>)
 80008b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 f931 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	200f      	movs	r0, #15
 80008c4:	f000 f808 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f000 fb3f 	bl	8000f4a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023c00 	.word	0x40023c00

080008d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x54>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x58>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f93b 	bl	8000b72 <HAL_SYSTICK_Config>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e00e      	b.n	8000924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d80a      	bhi.n	8000922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000914:	f000 f911 	bl	8000b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <HAL_InitTick+0x5c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	e000      	b.n	8000924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000000c 	.word	0x2000000c
 8000930:	20000014 	.word	0x20000014
 8000934:	20000010 	.word	0x20000010

08000938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_IncTick+0x20>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_IncTick+0x24>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4413      	add	r3, r2
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_IncTick+0x24>)
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000014 	.word	0x20000014
 800095c:	200000a4 	.word	0x200000a4

08000960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return uwTick;
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <HAL_GetTick+0x14>)
 8000966:	681b      	ldr	r3, [r3, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	200000a4 	.word	0x200000a4

08000978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000980:	f7ff ffee 	bl	8000960 <HAL_GetTick>
 8000984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000990:	d005      	beq.n	800099e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_Delay+0x44>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4413      	add	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800099e:	bf00      	nop
 80009a0:	f7ff ffde 	bl	8000960 <HAL_GetTick>
 80009a4:	4602      	mov	r2, r0
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d8f7      	bhi.n	80009a0 <HAL_Delay+0x28>
  {
  }
}
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000014 	.word	0x20000014

080009c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	60d3      	str	r3, [r2, #12]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <__NVIC_GetPriorityGrouping+0x18>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	f003 0307 	and.w	r3, r3, #7
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	db0a      	blt.n	8000a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	490c      	ldr	r1, [pc, #48]	; (8000a70 <__NVIC_SetPriority+0x4c>)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	0112      	lsls	r2, r2, #4
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	440b      	add	r3, r1
 8000a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a4c:	e00a      	b.n	8000a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4908      	ldr	r1, [pc, #32]	; (8000a74 <__NVIC_SetPriority+0x50>)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	3b04      	subs	r3, #4
 8000a5c:	0112      	lsls	r2, r2, #4
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	440b      	add	r3, r1
 8000a62:	761a      	strb	r2, [r3, #24]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b089      	sub	sp, #36	; 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	f1c3 0307 	rsb	r3, r3, #7
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	bf28      	it	cs
 8000a96:	2304      	movcs	r3, #4
 8000a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d902      	bls.n	8000aa8 <NVIC_EncodePriority+0x30>
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3b03      	subs	r3, #3
 8000aa6:	e000      	b.n	8000aaa <NVIC_EncodePriority+0x32>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aca:	43d9      	mvns	r1, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	4313      	orrs	r3, r2
         );
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3724      	adds	r7, #36	; 0x24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af0:	d301      	bcc.n	8000af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00f      	b.n	8000b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <SysTick_Config+0x40>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afe:	210f      	movs	r1, #15
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b04:	f7ff ff8e 	bl	8000a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <SysTick_Config+0x40>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SysTick_Config+0x40>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ff47 	bl	80009c0 <__NVIC_SetPriorityGrouping>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b4c:	f7ff ff5c 	bl	8000a08 <__NVIC_GetPriorityGrouping>
 8000b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f7ff ff8e 	bl	8000a78 <NVIC_EncodePriority>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff5d 	bl	8000a24 <__NVIC_SetPriority>
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ffb0 	bl	8000ae0 <SysTick_Config>
 8000b80:	4603      	mov	r3, r0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
 8000ba6:	e177      	b.n	8000e98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	f040 8166 	bne.w	8000e92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 0303 	and.w	r3, r3, #3
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d005      	beq.n	8000bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d130      	bne.n	8000c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	2203      	movs	r2, #3
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	68da      	ldr	r2, [r3, #12]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c14:	2201      	movs	r2, #1
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	091b      	lsrs	r3, r3, #4
 8000c2a:	f003 0201 	and.w	r2, r3, #1
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d017      	beq.n	8000c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2203      	movs	r2, #3
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d123      	bne.n	8000cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	08da      	lsrs	r2, r3, #3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3208      	adds	r2, #8
 8000c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	691a      	ldr	r2, [r3, #16]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	08da      	lsrs	r2, r3, #3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3208      	adds	r2, #8
 8000cca:	69b9      	ldr	r1, [r7, #24]
 8000ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0203 	and.w	r2, r3, #3
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f000 80c0 	beq.w	8000e92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <HAL_GPIO_Init+0x324>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a65      	ldr	r2, [pc, #404]	; (8000eb0 <HAL_GPIO_Init+0x324>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b63      	ldr	r3, [pc, #396]	; (8000eb0 <HAL_GPIO_Init+0x324>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d2e:	4a61      	ldr	r2, [pc, #388]	; (8000eb4 <HAL_GPIO_Init+0x328>)
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	3302      	adds	r3, #2
 8000d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	220f      	movs	r2, #15
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a58      	ldr	r2, [pc, #352]	; (8000eb8 <HAL_GPIO_Init+0x32c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d037      	beq.n	8000dca <HAL_GPIO_Init+0x23e>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a57      	ldr	r2, [pc, #348]	; (8000ebc <HAL_GPIO_Init+0x330>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d031      	beq.n	8000dc6 <HAL_GPIO_Init+0x23a>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a56      	ldr	r2, [pc, #344]	; (8000ec0 <HAL_GPIO_Init+0x334>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d02b      	beq.n	8000dc2 <HAL_GPIO_Init+0x236>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a55      	ldr	r2, [pc, #340]	; (8000ec4 <HAL_GPIO_Init+0x338>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d025      	beq.n	8000dbe <HAL_GPIO_Init+0x232>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a54      	ldr	r2, [pc, #336]	; (8000ec8 <HAL_GPIO_Init+0x33c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d01f      	beq.n	8000dba <HAL_GPIO_Init+0x22e>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a53      	ldr	r2, [pc, #332]	; (8000ecc <HAL_GPIO_Init+0x340>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d019      	beq.n	8000db6 <HAL_GPIO_Init+0x22a>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a52      	ldr	r2, [pc, #328]	; (8000ed0 <HAL_GPIO_Init+0x344>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d013      	beq.n	8000db2 <HAL_GPIO_Init+0x226>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a51      	ldr	r2, [pc, #324]	; (8000ed4 <HAL_GPIO_Init+0x348>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d00d      	beq.n	8000dae <HAL_GPIO_Init+0x222>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a50      	ldr	r2, [pc, #320]	; (8000ed8 <HAL_GPIO_Init+0x34c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d007      	beq.n	8000daa <HAL_GPIO_Init+0x21e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4f      	ldr	r2, [pc, #316]	; (8000edc <HAL_GPIO_Init+0x350>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d101      	bne.n	8000da6 <HAL_GPIO_Init+0x21a>
 8000da2:	2309      	movs	r3, #9
 8000da4:	e012      	b.n	8000dcc <HAL_GPIO_Init+0x240>
 8000da6:	230a      	movs	r3, #10
 8000da8:	e010      	b.n	8000dcc <HAL_GPIO_Init+0x240>
 8000daa:	2308      	movs	r3, #8
 8000dac:	e00e      	b.n	8000dcc <HAL_GPIO_Init+0x240>
 8000dae:	2307      	movs	r3, #7
 8000db0:	e00c      	b.n	8000dcc <HAL_GPIO_Init+0x240>
 8000db2:	2306      	movs	r3, #6
 8000db4:	e00a      	b.n	8000dcc <HAL_GPIO_Init+0x240>
 8000db6:	2305      	movs	r3, #5
 8000db8:	e008      	b.n	8000dcc <HAL_GPIO_Init+0x240>
 8000dba:	2304      	movs	r3, #4
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x240>
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e004      	b.n	8000dcc <HAL_GPIO_Init+0x240>
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	e002      	b.n	8000dcc <HAL_GPIO_Init+0x240>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e000      	b.n	8000dcc <HAL_GPIO_Init+0x240>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	69fa      	ldr	r2, [r7, #28]
 8000dce:	f002 0203 	and.w	r2, r2, #3
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	4093      	lsls	r3, r2
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ddc:	4935      	ldr	r1, [pc, #212]	; (8000eb4 <HAL_GPIO_Init+0x328>)
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	3302      	adds	r3, #2
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dea:	4b3d      	ldr	r3, [pc, #244]	; (8000ee0 <HAL_GPIO_Init+0x354>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e0e:	4a34      	ldr	r2, [pc, #208]	; (8000ee0 <HAL_GPIO_Init+0x354>)
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e14:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <HAL_GPIO_Init+0x354>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e38:	4a29      	ldr	r2, [pc, #164]	; (8000ee0 <HAL_GPIO_Init+0x354>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e3e:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <HAL_GPIO_Init+0x354>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e62:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_GPIO_Init+0x354>)
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_GPIO_Init+0x354>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <HAL_GPIO_Init+0x354>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3301      	adds	r3, #1
 8000e96:	61fb      	str	r3, [r7, #28]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	2b0f      	cmp	r3, #15
 8000e9c:	f67f ae84 	bls.w	8000ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40013800 	.word	0x40013800
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	40020c00 	.word	0x40020c00
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40021400 	.word	0x40021400
 8000ed0:	40021800 	.word	0x40021800
 8000ed4:	40021c00 	.word	0x40021c00
 8000ed8:	40022000 	.word	0x40022000
 8000edc:	40022400 	.word	0x40022400
 8000ee0:	40013c00 	.word	0x40013c00

08000ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef4:	787b      	ldrb	r3, [r7, #1]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efa:	887a      	ldrh	r2, [r7, #2]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f00:	e003      	b.n	8000f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	041a      	lsls	r2, r3, #16
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	619a      	str	r2, [r3, #24]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f28:	887a      	ldrh	r2, [r7, #2]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	041a      	lsls	r2, r3, #16
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	400b      	ands	r3, r1
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	619a      	str	r2, [r3, #24]
}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	4a1f      	ldr	r2, [pc, #124]	; (8000fe8 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	6413      	str	r3, [r2, #64]	; 0x40
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_PWREx_EnableOverDrive+0x94>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f84:	f7ff fcec 	bl	8000960 <HAL_GetTick>
 8000f88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f8a:	e009      	b.n	8000fa0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f8c:	f7ff fce8 	bl	8000960 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f9a:	d901      	bls.n	8000fa0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e01f      	b.n	8000fe0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fac:	d1ee      	bne.n	8000f8c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb4:	f7ff fcd4 	bl	8000960 <HAL_GetTick>
 8000fb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fba:	e009      	b.n	8000fd0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000fbc:	f7ff fcd0 	bl	8000960 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fca:	d901      	bls.n	8000fd0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e007      	b.n	8000fe0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000fdc:	d1ee      	bne.n	8000fbc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	420e0040 	.word	0x420e0040
 8000ff0:	40007000 	.word	0x40007000
 8000ff4:	420e0044 	.word	0x420e0044

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e264      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d075      	beq.n	8001102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001016:	4ba3      	ldr	r3, [pc, #652]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	2b04      	cmp	r3, #4
 8001020:	d00c      	beq.n	800103c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001022:	4ba0      	ldr	r3, [pc, #640]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800102a:	2b08      	cmp	r3, #8
 800102c:	d112      	bne.n	8001054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800102e:	4b9d      	ldr	r3, [pc, #628]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800103a:	d10b      	bne.n	8001054 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	4b99      	ldr	r3, [pc, #612]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d05b      	beq.n	8001100 <HAL_RCC_OscConfig+0x108>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d157      	bne.n	8001100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e23f      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800105c:	d106      	bne.n	800106c <HAL_RCC_OscConfig+0x74>
 800105e:	4b91      	ldr	r3, [pc, #580]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a90      	ldr	r2, [pc, #576]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e01d      	b.n	80010a8 <HAL_RCC_OscConfig+0xb0>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001074:	d10c      	bne.n	8001090 <HAL_RCC_OscConfig+0x98>
 8001076:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a8a      	ldr	r2, [pc, #552]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800107c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b88      	ldr	r3, [pc, #544]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a87      	ldr	r2, [pc, #540]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e00b      	b.n	80010a8 <HAL_RCC_OscConfig+0xb0>
 8001090:	4b84      	ldr	r3, [pc, #528]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a83      	ldr	r2, [pc, #524]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b81      	ldr	r3, [pc, #516]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a80      	ldr	r2, [pc, #512]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80010a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d013      	beq.n	80010d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b0:	f7ff fc56 	bl	8000960 <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b8:	f7ff fc52 	bl	8000960 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b64      	cmp	r3, #100	; 0x64
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e204      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ca:	4b76      	ldr	r3, [pc, #472]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f0      	beq.n	80010b8 <HAL_RCC_OscConfig+0xc0>
 80010d6:	e014      	b.n	8001102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fc42 	bl	8000960 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fc3e 	bl	8000960 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e1f0      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f2:	4b6c      	ldr	r3, [pc, #432]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0xe8>
 80010fe:	e000      	b.n	8001102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d063      	beq.n	80011d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800110e:	4b65      	ldr	r3, [pc, #404]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00b      	beq.n	8001132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111a:	4b62      	ldr	r3, [pc, #392]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001122:	2b08      	cmp	r3, #8
 8001124:	d11c      	bne.n	8001160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001126:	4b5f      	ldr	r3, [pc, #380]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d116      	bne.n	8001160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001132:	4b5c      	ldr	r3, [pc, #368]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <HAL_RCC_OscConfig+0x152>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d001      	beq.n	800114a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e1c4      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114a:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4952      	ldr	r1, [pc, #328]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115e:	e03a      	b.n	80011d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d020      	beq.n	80011aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001168:	4b4f      	ldr	r3, [pc, #316]	; (80012a8 <HAL_RCC_OscConfig+0x2b0>)
 800116a:	2201      	movs	r2, #1
 800116c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116e:	f7ff fbf7 	bl	8000960 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fbf3 	bl	8000960 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e1a5      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001194:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4940      	ldr	r1, [pc, #256]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]
 80011a8:	e015      	b.n	80011d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011aa:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <HAL_RCC_OscConfig+0x2b0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff fbd6 	bl	8000960 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b8:	f7ff fbd2 	bl	8000960 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e184      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d030      	beq.n	8001244 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d016      	beq.n	8001218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <HAL_RCC_OscConfig+0x2b4>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f0:	f7ff fbb6 	bl	8000960 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff fbb2 	bl	8000960 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e164      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x200>
 8001216:	e015      	b.n	8001244 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_RCC_OscConfig+0x2b4>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fb9f 	bl	8000960 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001226:	f7ff fb9b 	bl	8000960 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e14d      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800123a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f0      	bne.n	8001226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80a0 	beq.w	8001392 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10f      	bne.n	8001282 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800127e:	2301      	movs	r3, #1
 8001280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x2b8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128a:	2b00      	cmp	r3, #0
 800128c:	d121      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_RCC_OscConfig+0x2b8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_RCC_OscConfig+0x2b8>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129a:	f7ff fb61 	bl	8000960 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	e011      	b.n	80012c6 <HAL_RCC_OscConfig+0x2ce>
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	42470000 	.word	0x42470000
 80012ac:	42470e80 	.word	0x42470e80
 80012b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b4:	f7ff fb54 	bl	8000960 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e106      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b85      	ldr	r3, [pc, #532]	; (80014dc <HAL_RCC_OscConfig+0x4e4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d106      	bne.n	80012e8 <HAL_RCC_OscConfig+0x2f0>
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 80012dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012de:	4a80      	ldr	r2, [pc, #512]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6713      	str	r3, [r2, #112]	; 0x70
 80012e6:	e01c      	b.n	8001322 <HAL_RCC_OscConfig+0x32a>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d10c      	bne.n	800130a <HAL_RCC_OscConfig+0x312>
 80012f0:	4b7b      	ldr	r3, [pc, #492]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f4:	4a7a      	ldr	r2, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6713      	str	r3, [r2, #112]	; 0x70
 80012fc:	4b78      	ldr	r3, [pc, #480]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001300:	4a77      	ldr	r2, [pc, #476]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6713      	str	r3, [r2, #112]	; 0x70
 8001308:	e00b      	b.n	8001322 <HAL_RCC_OscConfig+0x32a>
 800130a:	4b75      	ldr	r3, [pc, #468]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 800130c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130e:	4a74      	ldr	r2, [pc, #464]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001310:	f023 0301 	bic.w	r3, r3, #1
 8001314:	6713      	str	r3, [r2, #112]	; 0x70
 8001316:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131a:	4a71      	ldr	r2, [pc, #452]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 800131c:	f023 0304 	bic.w	r3, r3, #4
 8001320:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d015      	beq.n	8001356 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132a:	f7ff fb19 	bl	8000960 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001330:	e00a      	b.n	8001348 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f7ff fb15 	bl	8000960 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001340:	4293      	cmp	r3, r2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e0c5      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001348:	4b65      	ldr	r3, [pc, #404]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 800134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0ee      	beq.n	8001332 <HAL_RCC_OscConfig+0x33a>
 8001354:	e014      	b.n	8001380 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fb03 	bl	8000960 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800135c:	e00a      	b.n	8001374 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135e:	f7ff faff 	bl	8000960 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	4293      	cmp	r3, r2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0af      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001374:	4b5a      	ldr	r3, [pc, #360]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ee      	bne.n	800135e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d105      	bne.n	8001392 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001386:	4b56      	ldr	r3, [pc, #344]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a55      	ldr	r2, [pc, #340]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 800138c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 809b 	beq.w	80014d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800139c:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d05c      	beq.n	8001462 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d141      	bne.n	8001434 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b0:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <HAL_RCC_OscConfig+0x4ec>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fad3 	bl	8000960 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013be:	f7ff facf 	bl	8000960 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e081      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d0:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f0      	bne.n	80013be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69da      	ldr	r2, [r3, #28]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	019b      	lsls	r3, r3, #6
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	085b      	lsrs	r3, r3, #1
 80013f4:	3b01      	subs	r3, #1
 80013f6:	041b      	lsls	r3, r3, #16
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	061b      	lsls	r3, r3, #24
 8001400:	4937      	ldr	r1, [pc, #220]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001406:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <HAL_RCC_OscConfig+0x4ec>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff faa8 	bl	8000960 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff faa4 	bl	8000960 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e056      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x41c>
 8001432:	e04e      	b.n	80014d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_RCC_OscConfig+0x4ec>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143a:	f7ff fa91 	bl	8000960 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001442:	f7ff fa8d 	bl	8000960 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e03f      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f0      	bne.n	8001442 <HAL_RCC_OscConfig+0x44a>
 8001460:	e037      	b.n	80014d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e032      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d028      	beq.n	80014ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001486:	429a      	cmp	r2, r3
 8001488:	d121      	bne.n	80014ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001494:	429a      	cmp	r2, r3
 8001496:	d11a      	bne.n	80014ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800149e:	4013      	ands	r3, r2
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d111      	bne.n	80014ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	085b      	lsrs	r3, r3, #1
 80014b6:	3b01      	subs	r3, #1
 80014b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40007000 	.word	0x40007000
 80014e0:	40023800 	.word	0x40023800
 80014e4:	42470060 	.word	0x42470060

080014e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0cc      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014fc:	4b68      	ldr	r3, [pc, #416]	; (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d90c      	bls.n	8001524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b65      	ldr	r3, [pc, #404]	; (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001512:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0b8      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800153c:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800155e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	494d      	ldr	r1, [pc, #308]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	4313      	orrs	r3, r2
 8001570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d044      	beq.n	8001608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d119      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e07f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d003      	beq.n	80015a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e06f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b6:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e067      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015c6:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f023 0203 	bic.w	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4934      	ldr	r1, [pc, #208]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d8:	f7ff f9c2 	bl	8000960 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f7ff f9be 	bl	8000960 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e04f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 020c 	and.w	r2, r3, #12
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	429a      	cmp	r2, r3
 8001606:	d1eb      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001608:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d20c      	bcs.n	8001630 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e032      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4916      	ldr	r1, [pc, #88]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d009      	beq.n	800166e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	490e      	ldr	r1, [pc, #56]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	4313      	orrs	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800166e:	f000 f821 	bl	80016b4 <HAL_RCC_GetSysClockFreq>
 8001672:	4602      	mov	r2, r0
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	490a      	ldr	r1, [pc, #40]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	5ccb      	ldrb	r3, [r1, r3]
 8001682:	fa22 f303 	lsr.w	r3, r2, r3
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_RCC_ClockConfig+0x1c8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f922 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023c00 	.word	0x40023c00
 80016a4:	40023800 	.word	0x40023800
 80016a8:	080032e8 	.word	0x080032e8
 80016ac:	2000000c 	.word	0x2000000c
 80016b0:	20000010 	.word	0x20000010

080016b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	2300      	movs	r3, #0
 80016c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016cc:	4b67      	ldr	r3, [pc, #412]	; (800186c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d00d      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x40>
 80016d8:	2b08      	cmp	r3, #8
 80016da:	f200 80bd 	bhi.w	8001858 <HAL_RCC_GetSysClockFreq+0x1a4>
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <HAL_RCC_GetSysClockFreq+0x34>
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d003      	beq.n	80016ee <HAL_RCC_GetSysClockFreq+0x3a>
 80016e6:	e0b7      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016e8:	4b61      	ldr	r3, [pc, #388]	; (8001870 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80016ea:	60bb      	str	r3, [r7, #8]
       break;
 80016ec:	e0b7      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ee:	4b61      	ldr	r3, [pc, #388]	; (8001874 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80016f0:	60bb      	str	r3, [r7, #8]
      break;
 80016f2:	e0b4      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016f4:	4b5d      	ldr	r3, [pc, #372]	; (800186c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016fe:	4b5b      	ldr	r3, [pc, #364]	; (800186c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d04d      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170a:	4b58      	ldr	r3, [pc, #352]	; (800186c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	099b      	lsrs	r3, r3, #6
 8001710:	461a      	mov	r2, r3
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	ea02 0800 	and.w	r8, r2, r0
 8001722:	ea03 0901 	and.w	r9, r3, r1
 8001726:	4640      	mov	r0, r8
 8001728:	4649      	mov	r1, r9
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	014b      	lsls	r3, r1, #5
 8001734:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001738:	0142      	lsls	r2, r0, #5
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	ebb0 0008 	subs.w	r0, r0, r8
 8001742:	eb61 0109 	sbc.w	r1, r1, r9
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	018b      	lsls	r3, r1, #6
 8001750:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001754:	0182      	lsls	r2, r0, #6
 8001756:	1a12      	subs	r2, r2, r0
 8001758:	eb63 0301 	sbc.w	r3, r3, r1
 800175c:	f04f 0000 	mov.w	r0, #0
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	00d9      	lsls	r1, r3, #3
 8001766:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800176a:	00d0      	lsls	r0, r2, #3
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	eb12 0208 	adds.w	r2, r2, r8
 8001774:	eb43 0309 	adc.w	r3, r3, r9
 8001778:	f04f 0000 	mov.w	r0, #0
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	0259      	lsls	r1, r3, #9
 8001782:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001786:	0250      	lsls	r0, r2, #9
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	461a      	mov	r2, r3
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	f7fe fd7a 	bl	8000290 <__aeabi_uldivmod>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4613      	mov	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	e04a      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	099b      	lsrs	r3, r3, #6
 80017ac:	461a      	mov	r2, r3
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017b6:	f04f 0100 	mov.w	r1, #0
 80017ba:	ea02 0400 	and.w	r4, r2, r0
 80017be:	ea03 0501 	and.w	r5, r3, r1
 80017c2:	4620      	mov	r0, r4
 80017c4:	4629      	mov	r1, r5
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	014b      	lsls	r3, r1, #5
 80017d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017d4:	0142      	lsls	r2, r0, #5
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	1b00      	subs	r0, r0, r4
 80017dc:	eb61 0105 	sbc.w	r1, r1, r5
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	018b      	lsls	r3, r1, #6
 80017ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017ee:	0182      	lsls	r2, r0, #6
 80017f0:	1a12      	subs	r2, r2, r0
 80017f2:	eb63 0301 	sbc.w	r3, r3, r1
 80017f6:	f04f 0000 	mov.w	r0, #0
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	00d9      	lsls	r1, r3, #3
 8001800:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001804:	00d0      	lsls	r0, r2, #3
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	1912      	adds	r2, r2, r4
 800180c:	eb45 0303 	adc.w	r3, r5, r3
 8001810:	f04f 0000 	mov.w	r0, #0
 8001814:	f04f 0100 	mov.w	r1, #0
 8001818:	0299      	lsls	r1, r3, #10
 800181a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800181e:	0290      	lsls	r0, r2, #10
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	461a      	mov	r2, r3
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	f7fe fd2e 	bl	8000290 <__aeabi_uldivmod>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4613      	mov	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	0c1b      	lsrs	r3, r3, #16
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	3301      	adds	r3, #1
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	60bb      	str	r3, [r7, #8]
      break;
 8001856:	e002      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800185a:	60bb      	str	r3, [r7, #8]
      break;
 800185c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800185e:	68bb      	ldr	r3, [r7, #8]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	00f42400 	.word	0x00f42400
 8001874:	007a1200 	.word	0x007a1200

08001878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <HAL_RCC_GetHCLKFreq+0x14>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	2000000c 	.word	0x2000000c

08001890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001894:	f7ff fff0 	bl	8001878 <HAL_RCC_GetHCLKFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	0a9b      	lsrs	r3, r3, #10
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	4903      	ldr	r1, [pc, #12]	; (80018b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	080032f8 	.word	0x080032f8

080018b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018bc:	f7ff ffdc 	bl	8001878 <HAL_RCC_GetHCLKFreq>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	0b5b      	lsrs	r3, r3, #13
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	4903      	ldr	r1, [pc, #12]	; (80018dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ce:	5ccb      	ldrb	r3, [r1, r3]
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40023800 	.word	0x40023800
 80018dc:	080032f8 	.word	0x080032f8

080018e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e03f      	b.n	8001972 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d106      	bne.n	800190c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 fc9a 	bl	8002240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2224      	movs	r2, #36	; 0x24
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f9cb 	bl	8001cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2220      	movs	r2, #32
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2220      	movs	r2, #32
 800196c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b08a      	sub	sp, #40	; 0x28
 800197e:	af02      	add	r7, sp, #8
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	4613      	mov	r3, r2
 8001988:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b20      	cmp	r3, #32
 8001998:	d17c      	bne.n	8001a94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <HAL_UART_Transmit+0x2c>
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e075      	b.n	8001a96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_UART_Transmit+0x3e>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e06e      	b.n	8001a96 <HAL_UART_Transmit+0x11c>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2221      	movs	r2, #33	; 0x21
 80019ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019ce:	f7fe ffc7 	bl	8000960 <HAL_GetTick>
 80019d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	88fa      	ldrh	r2, [r7, #6]
 80019d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	88fa      	ldrh	r2, [r7, #6]
 80019de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e8:	d108      	bne.n	80019fc <HAL_UART_Transmit+0x82>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d104      	bne.n	80019fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	e003      	b.n	8001a04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a0c:	e02a      	b.n	8001a64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2200      	movs	r2, #0
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 f8e2 	bl	8001be2 <UART_WaitOnFlagUntilTimeout>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e036      	b.n	8001a96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10b      	bne.n	8001a46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	3302      	adds	r3, #2
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	e007      	b.n	8001a56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	3301      	adds	r3, #1
 8001a54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1cf      	bne.n	8001a0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2200      	movs	r2, #0
 8001a76:	2140      	movs	r1, #64	; 0x40
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 f8b2 	bl	8001be2 <UART_WaitOnFlagUntilTimeout>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e006      	b.n	8001a96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	e000      	b.n	8001a96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001a94:	2302      	movs	r3, #2
  }
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b08a      	sub	sp, #40	; 0x28
 8001aa2:	af02      	add	r7, sp, #8
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	f040 808c 	bne.w	8001bd8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_UART_Receive+0x2e>
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e084      	b.n	8001bda <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_UART_Receive+0x40>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e07d      	b.n	8001bda <HAL_UART_Receive+0x13c>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2222      	movs	r2, #34	; 0x22
 8001af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001afa:	f7fe ff31 	bl	8000960 <HAL_GetTick>
 8001afe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	88fa      	ldrh	r2, [r7, #6]
 8001b04:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	88fa      	ldrh	r2, [r7, #6]
 8001b0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b14:	d108      	bne.n	8001b28 <HAL_UART_Receive+0x8a>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d104      	bne.n	8001b28 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	e003      	b.n	8001b30 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001b38:	e043      	b.n	8001bc2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2200      	movs	r2, #0
 8001b42:	2120      	movs	r1, #32
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f84c 	bl	8001be2 <UART_WaitOnFlagUntilTimeout>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e042      	b.n	8001bda <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	3302      	adds	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	e01f      	b.n	8001bb4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b7c:	d007      	beq.n	8001b8e <HAL_UART_Receive+0xf0>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10a      	bne.n	8001b9c <HAL_UART_Receive+0xfe>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	701a      	strb	r2, [r3, #0]
 8001b9a:	e008      	b.n	8001bae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1b6      	bne.n	8001b3a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e000      	b.n	8001bda <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
  }
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3720      	adds	r7, #32
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b090      	sub	sp, #64	; 0x40
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bf2:	e050      	b.n	8001c96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bfa:	d04c      	beq.n	8001c96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c02:	f7fe fead 	bl	8000960 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d241      	bcs.n	8001c96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	330c      	adds	r3, #12
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	e853 3f00 	ldrex	r3, [r3]
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	330c      	adds	r3, #12
 8001c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c32:	637a      	str	r2, [r7, #52]	; 0x34
 8001c34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c3a:	e841 2300 	strex	r3, r2, [r1]
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1e5      	bne.n	8001c12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3314      	adds	r3, #20
 8001c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	e853 3f00 	ldrex	r3, [r3]
 8001c54:	613b      	str	r3, [r7, #16]
   return(result);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3314      	adds	r3, #20
 8001c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c66:	623a      	str	r2, [r7, #32]
 8001c68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c6a:	69f9      	ldr	r1, [r7, #28]
 8001c6c:	6a3a      	ldr	r2, [r7, #32]
 8001c6e:	e841 2300 	strex	r3, r2, [r1]
 8001c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1e5      	bne.n	8001c46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e00f      	b.n	8001cb6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	bf0c      	ite	eq
 8001ca6:	2301      	moveq	r3, #1
 8001ca8:	2300      	movne	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d09f      	beq.n	8001bf4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3740      	adds	r7, #64	; 0x40
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc4:	b09f      	sub	sp, #124	; 0x7c
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd6:	68d9      	ldr	r1, [r3, #12]
 8001cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	ea40 0301 	orr.w	r3, r0, r1
 8001ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d04:	f021 010c 	bic.w	r1, r1, #12
 8001d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d1e:	6999      	ldr	r1, [r3, #24]
 8001d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	ea40 0301 	orr.w	r3, r0, r1
 8001d28:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4bc5      	ldr	r3, [pc, #788]	; (8002044 <UART_SetConfig+0x384>)
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d004      	beq.n	8001d3e <UART_SetConfig+0x7e>
 8001d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4bc3      	ldr	r3, [pc, #780]	; (8002048 <UART_SetConfig+0x388>)
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d103      	bne.n	8001d46 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d3e:	f7ff fdbb 	bl	80018b8 <HAL_RCC_GetPCLK2Freq>
 8001d42:	6778      	str	r0, [r7, #116]	; 0x74
 8001d44:	e002      	b.n	8001d4c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d46:	f7ff fda3 	bl	8001890 <HAL_RCC_GetPCLK1Freq>
 8001d4a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d54:	f040 80b6 	bne.w	8001ec4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d5a:	461c      	mov	r4, r3
 8001d5c:	f04f 0500 	mov.w	r5, #0
 8001d60:	4622      	mov	r2, r4
 8001d62:	462b      	mov	r3, r5
 8001d64:	1891      	adds	r1, r2, r2
 8001d66:	6439      	str	r1, [r7, #64]	; 0x40
 8001d68:	415b      	adcs	r3, r3
 8001d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d70:	1912      	adds	r2, r2, r4
 8001d72:	eb45 0303 	adc.w	r3, r5, r3
 8001d76:	f04f 0000 	mov.w	r0, #0
 8001d7a:	f04f 0100 	mov.w	r1, #0
 8001d7e:	00d9      	lsls	r1, r3, #3
 8001d80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d84:	00d0      	lsls	r0, r2, #3
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	1911      	adds	r1, r2, r4
 8001d8c:	6639      	str	r1, [r7, #96]	; 0x60
 8001d8e:	416b      	adcs	r3, r5
 8001d90:	667b      	str	r3, [r7, #100]	; 0x64
 8001d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	1891      	adds	r1, r2, r2
 8001d9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001da0:	415b      	adcs	r3, r3
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001da8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001dac:	f7fe fa70 	bl	8000290 <__aeabi_uldivmod>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4ba5      	ldr	r3, [pc, #660]	; (800204c <UART_SetConfig+0x38c>)
 8001db6:	fba3 2302 	umull	r2, r3, r3, r2
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	011e      	lsls	r6, r3, #4
 8001dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dc0:	461c      	mov	r4, r3
 8001dc2:	f04f 0500 	mov.w	r5, #0
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	462b      	mov	r3, r5
 8001dca:	1891      	adds	r1, r2, r2
 8001dcc:	6339      	str	r1, [r7, #48]	; 0x30
 8001dce:	415b      	adcs	r3, r3
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001dd6:	1912      	adds	r2, r2, r4
 8001dd8:	eb45 0303 	adc.w	r3, r5, r3
 8001ddc:	f04f 0000 	mov.w	r0, #0
 8001de0:	f04f 0100 	mov.w	r1, #0
 8001de4:	00d9      	lsls	r1, r3, #3
 8001de6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dea:	00d0      	lsls	r0, r2, #3
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	1911      	adds	r1, r2, r4
 8001df2:	65b9      	str	r1, [r7, #88]	; 0x58
 8001df4:	416b      	adcs	r3, r5
 8001df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	1891      	adds	r1, r2, r2
 8001e04:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e06:	415b      	adcs	r3, r3
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e12:	f7fe fa3d 	bl	8000290 <__aeabi_uldivmod>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4b8c      	ldr	r3, [pc, #560]	; (800204c <UART_SetConfig+0x38c>)
 8001e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e20:	095b      	lsrs	r3, r3, #5
 8001e22:	2164      	movs	r1, #100	; 0x64
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	3332      	adds	r3, #50	; 0x32
 8001e2e:	4a87      	ldr	r2, [pc, #540]	; (800204c <UART_SetConfig+0x38c>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	095b      	lsrs	r3, r3, #5
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e3c:	441e      	add	r6, r3
 8001e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e40:	4618      	mov	r0, r3
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	1894      	adds	r4, r2, r2
 8001e4c:	623c      	str	r4, [r7, #32]
 8001e4e:	415b      	adcs	r3, r3
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e56:	1812      	adds	r2, r2, r0
 8001e58:	eb41 0303 	adc.w	r3, r1, r3
 8001e5c:	f04f 0400 	mov.w	r4, #0
 8001e60:	f04f 0500 	mov.w	r5, #0
 8001e64:	00dd      	lsls	r5, r3, #3
 8001e66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001e6a:	00d4      	lsls	r4, r2, #3
 8001e6c:	4622      	mov	r2, r4
 8001e6e:	462b      	mov	r3, r5
 8001e70:	1814      	adds	r4, r2, r0
 8001e72:	653c      	str	r4, [r7, #80]	; 0x50
 8001e74:	414b      	adcs	r3, r1
 8001e76:	657b      	str	r3, [r7, #84]	; 0x54
 8001e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	1891      	adds	r1, r2, r2
 8001e84:	61b9      	str	r1, [r7, #24]
 8001e86:	415b      	adcs	r3, r3
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e92:	f7fe f9fd 	bl	8000290 <__aeabi_uldivmod>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4b6c      	ldr	r3, [pc, #432]	; (800204c <UART_SetConfig+0x38c>)
 8001e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	2164      	movs	r1, #100	; 0x64
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	3332      	adds	r3, #50	; 0x32
 8001eae:	4a67      	ldr	r2, [pc, #412]	; (800204c <UART_SetConfig+0x38c>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	f003 0207 	and.w	r2, r3, #7
 8001eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4432      	add	r2, r6
 8001ec0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ec2:	e0b9      	b.n	8002038 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ec6:	461c      	mov	r4, r3
 8001ec8:	f04f 0500 	mov.w	r5, #0
 8001ecc:	4622      	mov	r2, r4
 8001ece:	462b      	mov	r3, r5
 8001ed0:	1891      	adds	r1, r2, r2
 8001ed2:	6139      	str	r1, [r7, #16]
 8001ed4:	415b      	adcs	r3, r3
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001edc:	1912      	adds	r2, r2, r4
 8001ede:	eb45 0303 	adc.w	r3, r5, r3
 8001ee2:	f04f 0000 	mov.w	r0, #0
 8001ee6:	f04f 0100 	mov.w	r1, #0
 8001eea:	00d9      	lsls	r1, r3, #3
 8001eec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ef0:	00d0      	lsls	r0, r2, #3
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	eb12 0804 	adds.w	r8, r2, r4
 8001efa:	eb43 0905 	adc.w	r9, r3, r5
 8001efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f04f 0100 	mov.w	r1, #0
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	008b      	lsls	r3, r1, #2
 8001f12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f16:	0082      	lsls	r2, r0, #2
 8001f18:	4640      	mov	r0, r8
 8001f1a:	4649      	mov	r1, r9
 8001f1c:	f7fe f9b8 	bl	8000290 <__aeabi_uldivmod>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4b49      	ldr	r3, [pc, #292]	; (800204c <UART_SetConfig+0x38c>)
 8001f26:	fba3 2302 	umull	r2, r3, r3, r2
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	011e      	lsls	r6, r3, #4
 8001f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f30:	4618      	mov	r0, r3
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	1894      	adds	r4, r2, r2
 8001f3c:	60bc      	str	r4, [r7, #8]
 8001f3e:	415b      	adcs	r3, r3
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f46:	1812      	adds	r2, r2, r0
 8001f48:	eb41 0303 	adc.w	r3, r1, r3
 8001f4c:	f04f 0400 	mov.w	r4, #0
 8001f50:	f04f 0500 	mov.w	r5, #0
 8001f54:	00dd      	lsls	r5, r3, #3
 8001f56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f5a:	00d4      	lsls	r4, r2, #3
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	462b      	mov	r3, r5
 8001f60:	1814      	adds	r4, r2, r0
 8001f62:	64bc      	str	r4, [r7, #72]	; 0x48
 8001f64:	414b      	adcs	r3, r1
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f04f 0100 	mov.w	r1, #0
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	008b      	lsls	r3, r1, #2
 8001f7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f80:	0082      	lsls	r2, r0, #2
 8001f82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001f86:	f7fe f983 	bl	8000290 <__aeabi_uldivmod>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	; (800204c <UART_SetConfig+0x38c>)
 8001f90:	fba3 1302 	umull	r1, r3, r3, r2
 8001f94:	095b      	lsrs	r3, r3, #5
 8001f96:	2164      	movs	r1, #100	; 0x64
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	3332      	adds	r3, #50	; 0x32
 8001fa2:	4a2a      	ldr	r2, [pc, #168]	; (800204c <UART_SetConfig+0x38c>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fae:	441e      	add	r6, r3
 8001fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f04f 0100 	mov.w	r1, #0
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	1894      	adds	r4, r2, r2
 8001fbe:	603c      	str	r4, [r7, #0]
 8001fc0:	415b      	adcs	r3, r3
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fc8:	1812      	adds	r2, r2, r0
 8001fca:	eb41 0303 	adc.w	r3, r1, r3
 8001fce:	f04f 0400 	mov.w	r4, #0
 8001fd2:	f04f 0500 	mov.w	r5, #0
 8001fd6:	00dd      	lsls	r5, r3, #3
 8001fd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001fdc:	00d4      	lsls	r4, r2, #3
 8001fde:	4622      	mov	r2, r4
 8001fe0:	462b      	mov	r3, r5
 8001fe2:	eb12 0a00 	adds.w	sl, r2, r0
 8001fe6:	eb43 0b01 	adc.w	fp, r3, r1
 8001fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f04f 0100 	mov.w	r1, #0
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	008b      	lsls	r3, r1, #2
 8001ffe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002002:	0082      	lsls	r2, r0, #2
 8002004:	4650      	mov	r0, sl
 8002006:	4659      	mov	r1, fp
 8002008:	f7fe f942 	bl	8000290 <__aeabi_uldivmod>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <UART_SetConfig+0x38c>)
 8002012:	fba3 1302 	umull	r1, r3, r3, r2
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2164      	movs	r1, #100	; 0x64
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	3332      	adds	r3, #50	; 0x32
 8002024:	4a09      	ldr	r2, [pc, #36]	; (800204c <UART_SetConfig+0x38c>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	f003 020f 	and.w	r2, r3, #15
 8002030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4432      	add	r2, r6
 8002036:	609a      	str	r2, [r3, #8]
}
 8002038:	bf00      	nop
 800203a:	377c      	adds	r7, #124	; 0x7c
 800203c:	46bd      	mov	sp, r7
 800203e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002042:	bf00      	nop
 8002044:	40011000 	.word	0x40011000
 8002048:	40011400 	.word	0x40011400
 800204c:	51eb851f 	.word	0x51eb851f

08002050 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8002056:	f7fe fc23 	bl	80008a0 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 800205a:	f000 f889 	bl	8002170 <SystemClock_Config>

  /* Initialize BSP Led for LED2 and LED3*/
  BSP_LED_Init(LED2);
 800205e:	2001      	movs	r0, #1
 8002060:	f7fe fa92 	bl	8000588 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8002064:	2002      	movs	r0, #2
 8002066:	f7fe fa8f 	bl	8000588 <BSP_LED_Init>
	                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
      - Stop Bit    = One Stop bit
      - Parity      = ODD parity
      - BaudRate    = 9600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 800206a:	4b32      	ldr	r3, [pc, #200]	; (8002134 <main+0xe4>)
 800206c:	4a32      	ldr	r2, [pc, #200]	; (8002138 <main+0xe8>)
 800206e:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 9600;
 8002070:	4b30      	ldr	r3, [pc, #192]	; (8002134 <main+0xe4>)
 8002072:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002076:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002078:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <main+0xe4>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <main+0xe4>)
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <main+0xe4>)
 8002086:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800208a:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800208c:	4b29      	ldr	r3, [pc, #164]	; (8002134 <main+0xe4>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002092:	4b28      	ldr	r3, [pc, #160]	; (8002134 <main+0xe4>)
 8002094:	220c      	movs	r2, #12
 8002096:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8002098:	4b26      	ldr	r3, [pc, #152]	; (8002134 <main+0xe4>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800209e:	4825      	ldr	r0, [pc, #148]	; (8002134 <main+0xe4>)
 80020a0:	f7ff fc1e 	bl	80018e0 <HAL_UART_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <main+0x5e>
  {
    /* Initialization Error */
    Error_Handler();
 80020aa:	f000 f8c3 	bl	8002234 <Error_Handler>
  }

  /* Output a message on Hyperterminal using printf function */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 80020ae:	4823      	ldr	r0, [pc, #140]	; (800213c <main+0xec>)
 80020b0:	f000 f974 	bl	800239c <iprintf>
  printf("** Test finished successfully. ** \n\r");
 80020b4:	4822      	ldr	r0, [pc, #136]	; (8002140 <main+0xf0>)
 80020b6:	f000 f971 	bl	800239c <iprintf>

  //uint8_t miString[] = "hola mundo\n\r";
  uint8_t miString2[1];
 // uint8_t recibe[4];
  uint8_t miString[] = "OK\n\r" ;
 80020ba:	4a22      	ldr	r2, [pc, #136]	; (8002144 <main+0xf4>)
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020c2:	6018      	str	r0, [r3, #0]
 80020c4:	3304      	adds	r3, #4
 80020c6:	7019      	strb	r1, [r3, #0]
  uint8_t can[4] = "CAN";
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <main+0xf8>)
 80020ca:	603b      	str	r3, [r7, #0]
  uint8_t i=0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]


  /* Infinite loop */
  while (1)
  {
	  HAL_UART_Receive(&UartHandle, miString2, 1, 1000);
 80020d0:	f107 010c 	add.w	r1, r7, #12
 80020d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d8:	2201      	movs	r2, #1
 80020da:	4816      	ldr	r0, [pc, #88]	; (8002134 <main+0xe4>)
 80020dc:	f7ff fcdf 	bl	8001a9e <HAL_UART_Receive>

  for(i=0;i<3;i++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e021      	b.n	800212a <main+0xda>
  { if(miString2[i] == can[i]) {
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	f107 0210 	add.w	r2, r7, #16
 80020ec:	4413      	add	r3, r2
 80020ee:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	f107 0110 	add.w	r1, r7, #16
 80020f8:	440b      	add	r3, r1
 80020fa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d10d      	bne.n	800211e <main+0xce>
    	 HAL_UART_Transmit(&UartHandle, miString, 4, 1000);
 8002102:	1d39      	adds	r1, r7, #4
 8002104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002108:	2204      	movs	r2, #4
 800210a:	480a      	ldr	r0, [pc, #40]	; (8002134 <main+0xe4>)
 800210c:	f7ff fc35 	bl	800197a <HAL_UART_Transmit>
	     BSP_LED_Toggle(LED3);
 8002110:	2002      	movs	r0, #2
 8002112:	f7fe faa3 	bl	800065c <BSP_LED_Toggle>
	     HAL_Delay(10);
 8002116:	200a      	movs	r0, #10
 8002118:	f7fe fc2e 	bl	8000978 <HAL_Delay>
 800211c:	e002      	b.n	8002124 <main+0xd4>
     } else {
    	 BSP_LED_Toggle(LED2);
 800211e:	2001      	movs	r0, #1
 8002120:	f7fe fa9c 	bl	800065c <BSP_LED_Toggle>
  for(i=0;i<3;i++)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	3301      	adds	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d9da      	bls.n	80020e6 <main+0x96>
	  HAL_UART_Receive(&UartHandle, miString2, 1, 1000);
 8002130:	e7ce      	b.n	80020d0 <main+0x80>
 8002132:	bf00      	nop
 8002134:	200000a8 	.word	0x200000a8
 8002138:	40004800 	.word	0x40004800
 800213c:	08003260 	.word	0x08003260
 8002140:	080032b0 	.word	0x080032b0
 8002144:	080032d8 	.word	0x080032d8
 8002148:	004e4143 	.word	0x004e4143

0800214c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8002154:	1d39      	adds	r1, r7, #4
 8002156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800215a:	2201      	movs	r2, #1
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <__io_putchar+0x20>)
 800215e:	f7ff fc0c 	bl	800197a <HAL_UART_Transmit>

  return ch;
 8002162:	687b      	ldr	r3, [r7, #4]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	200000a8 	.word	0x200000a8

08002170 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b094      	sub	sp, #80	; 0x50
 8002174:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b2c      	ldr	r3, [pc, #176]	; (800222c <SystemClock_Config+0xbc>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a2b      	ldr	r2, [pc, #172]	; (800222c <SystemClock_Config+0xbc>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b29      	ldr	r3, [pc, #164]	; (800222c <SystemClock_Config+0xbc>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	4b26      	ldr	r3, [pc, #152]	; (8002230 <SystemClock_Config+0xc0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a25      	ldr	r2, [pc, #148]	; (8002230 <SystemClock_Config+0xc0>)
 800219c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b23      	ldr	r3, [pc, #140]	; (8002230 <SystemClock_Config+0xc0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021ae:	2301      	movs	r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80021b2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80021b6:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021b8:	2302      	movs	r3, #2
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021c2:	2308      	movs	r3, #8
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80021c6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021cc:	2302      	movs	r3, #2
 80021ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021d0:	2307      	movs	r3, #7
 80021d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe ff0d 	bl	8000ff8 <HAL_RCC_OscConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 80021e4:	f000 f826 	bl	8002234 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021e8:	f7fe feb6 	bl	8000f58 <HAL_PWREx_EnableOverDrive>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 80021f2:	f000 f81f 	bl	8002234 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80021f6:	230f      	movs	r3, #15
 80021f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021fa:	2302      	movs	r3, #2
 80021fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021fe:	2300      	movs	r3, #0
 8002200:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8002202:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800220e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002212:	2105      	movs	r1, #5
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff f967 	bl	80014e8 <HAL_RCC_ClockConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8002220:	f000 f808 	bl	8002234 <Error_Handler>
  }
}
 8002224:	bf00      	nop
 8002226:	3750      	adds	r7, #80	; 0x50
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40023800 	.word	0x40023800
 8002230:	40007000 	.word	0x40007000

08002234 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8002238:	2001      	movs	r0, #1
 800223a:	f7fe f9f5 	bl	8000628 <BSP_LED_On>
  while (1)
 800223e:	e7fe      	b.n	800223e <Error_Handler+0xa>

08002240 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	4b23      	ldr	r3, [pc, #140]	; (80022dc <HAL_UART_MspInit+0x9c>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	4a22      	ldr	r2, [pc, #136]	; (80022dc <HAL_UART_MspInit+0x9c>)
 8002252:	f043 0308 	orr.w	r3, r3, #8
 8002256:	6313      	str	r3, [r2, #48]	; 0x30
 8002258:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_UART_MspInit+0x9c>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_UART_MspInit+0x9c>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_UART_MspInit+0x9c>)
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	6313      	str	r3, [r2, #48]	; 0x30
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_UART_MspInit+0x9c>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_UART_MspInit+0x9c>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <HAL_UART_MspInit+0x9c>)
 800228a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228e:	6413      	str	r3, [r2, #64]	; 0x40
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_UART_MspInit+0x9c>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800229c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80022ae:	2307      	movs	r3, #7
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	4809      	ldr	r0, [pc, #36]	; (80022e0 <HAL_UART_MspInit+0xa0>)
 80022ba:	f7fe fc67 	bl	8000b8c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80022be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80022c4:	2307      	movs	r3, #7
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4619      	mov	r1, r3
 80022ce:	4804      	ldr	r0, [pc, #16]	; (80022e0 <HAL_UART_MspInit+0xa0>)
 80022d0:	f7fe fc5c 	bl	8000b8c <HAL_GPIO_Init>
}
 80022d4:	bf00      	nop
 80022d6:	3728      	adds	r7, #40	; 0x28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020c00 	.word	0x40020c00

080022e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80022e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800231c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022ea:	e003      	b.n	80022f4 <LoopCopyDataInit>

080022ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022f2:	3104      	adds	r1, #4

080022f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022f4:	480b      	ldr	r0, [pc, #44]	; (8002324 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022fc:	d3f6      	bcc.n	80022ec <CopyDataInit>
  ldr  r2, =_sbss
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002300:	e002      	b.n	8002308 <LoopFillZerobss>

08002302 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002302:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002304:	f842 3b04 	str.w	r3, [r2], #4

08002308 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800230a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800230c:	d3f9      	bcc.n	8002302 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800230e:	f7fe f9bf 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002312:	f000 f817 	bl	8002344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002316:	f7ff fe9b 	bl	8002050 <main>
  bx  lr    
 800231a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800231c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002320:	080033a8 	.word	0x080033a8
  ldr  r0, =_sdata
 8002324:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002328:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800232c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002330:	200000fc 	.word	0x200000fc

08002334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC_IRQHandler>
	...

08002338 <__errno>:
 8002338:	4b01      	ldr	r3, [pc, #4]	; (8002340 <__errno+0x8>)
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000018 	.word	0x20000018

08002344 <__libc_init_array>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	4d0d      	ldr	r5, [pc, #52]	; (800237c <__libc_init_array+0x38>)
 8002348:	4c0d      	ldr	r4, [pc, #52]	; (8002380 <__libc_init_array+0x3c>)
 800234a:	1b64      	subs	r4, r4, r5
 800234c:	10a4      	asrs	r4, r4, #2
 800234e:	2600      	movs	r6, #0
 8002350:	42a6      	cmp	r6, r4
 8002352:	d109      	bne.n	8002368 <__libc_init_array+0x24>
 8002354:	4d0b      	ldr	r5, [pc, #44]	; (8002384 <__libc_init_array+0x40>)
 8002356:	4c0c      	ldr	r4, [pc, #48]	; (8002388 <__libc_init_array+0x44>)
 8002358:	f000 ff76 	bl	8003248 <_init>
 800235c:	1b64      	subs	r4, r4, r5
 800235e:	10a4      	asrs	r4, r4, #2
 8002360:	2600      	movs	r6, #0
 8002362:	42a6      	cmp	r6, r4
 8002364:	d105      	bne.n	8002372 <__libc_init_array+0x2e>
 8002366:	bd70      	pop	{r4, r5, r6, pc}
 8002368:	f855 3b04 	ldr.w	r3, [r5], #4
 800236c:	4798      	blx	r3
 800236e:	3601      	adds	r6, #1
 8002370:	e7ee      	b.n	8002350 <__libc_init_array+0xc>
 8002372:	f855 3b04 	ldr.w	r3, [r5], #4
 8002376:	4798      	blx	r3
 8002378:	3601      	adds	r6, #1
 800237a:	e7f2      	b.n	8002362 <__libc_init_array+0x1e>
 800237c:	080033a0 	.word	0x080033a0
 8002380:	080033a0 	.word	0x080033a0
 8002384:	080033a0 	.word	0x080033a0
 8002388:	080033a4 	.word	0x080033a4

0800238c <memset>:
 800238c:	4402      	add	r2, r0
 800238e:	4603      	mov	r3, r0
 8002390:	4293      	cmp	r3, r2
 8002392:	d100      	bne.n	8002396 <memset+0xa>
 8002394:	4770      	bx	lr
 8002396:	f803 1b01 	strb.w	r1, [r3], #1
 800239a:	e7f9      	b.n	8002390 <memset+0x4>

0800239c <iprintf>:
 800239c:	b40f      	push	{r0, r1, r2, r3}
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <iprintf+0x2c>)
 80023a0:	b513      	push	{r0, r1, r4, lr}
 80023a2:	681c      	ldr	r4, [r3, #0]
 80023a4:	b124      	cbz	r4, 80023b0 <iprintf+0x14>
 80023a6:	69a3      	ldr	r3, [r4, #24]
 80023a8:	b913      	cbnz	r3, 80023b0 <iprintf+0x14>
 80023aa:	4620      	mov	r0, r4
 80023ac:	f000 f866 	bl	800247c <__sinit>
 80023b0:	ab05      	add	r3, sp, #20
 80023b2:	9a04      	ldr	r2, [sp, #16]
 80023b4:	68a1      	ldr	r1, [r4, #8]
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	4620      	mov	r0, r4
 80023ba:	f000 f983 	bl	80026c4 <_vfiprintf_r>
 80023be:	b002      	add	sp, #8
 80023c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c4:	b004      	add	sp, #16
 80023c6:	4770      	bx	lr
 80023c8:	20000018 	.word	0x20000018

080023cc <std>:
 80023cc:	2300      	movs	r3, #0
 80023ce:	b510      	push	{r4, lr}
 80023d0:	4604      	mov	r4, r0
 80023d2:	e9c0 3300 	strd	r3, r3, [r0]
 80023d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023da:	6083      	str	r3, [r0, #8]
 80023dc:	8181      	strh	r1, [r0, #12]
 80023de:	6643      	str	r3, [r0, #100]	; 0x64
 80023e0:	81c2      	strh	r2, [r0, #14]
 80023e2:	6183      	str	r3, [r0, #24]
 80023e4:	4619      	mov	r1, r3
 80023e6:	2208      	movs	r2, #8
 80023e8:	305c      	adds	r0, #92	; 0x5c
 80023ea:	f7ff ffcf 	bl	800238c <memset>
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <std+0x38>)
 80023f0:	6263      	str	r3, [r4, #36]	; 0x24
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <std+0x3c>)
 80023f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <std+0x40>)
 80023f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <std+0x44>)
 80023fc:	6224      	str	r4, [r4, #32]
 80023fe:	6323      	str	r3, [r4, #48]	; 0x30
 8002400:	bd10      	pop	{r4, pc}
 8002402:	bf00      	nop
 8002404:	08002c6d 	.word	0x08002c6d
 8002408:	08002c8f 	.word	0x08002c8f
 800240c:	08002cc7 	.word	0x08002cc7
 8002410:	08002ceb 	.word	0x08002ceb

08002414 <_cleanup_r>:
 8002414:	4901      	ldr	r1, [pc, #4]	; (800241c <_cleanup_r+0x8>)
 8002416:	f000 b8af 	b.w	8002578 <_fwalk_reent>
 800241a:	bf00      	nop
 800241c:	08002fc5 	.word	0x08002fc5

08002420 <__sfmoreglue>:
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	1e4a      	subs	r2, r1, #1
 8002424:	2568      	movs	r5, #104	; 0x68
 8002426:	4355      	muls	r5, r2
 8002428:	460e      	mov	r6, r1
 800242a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800242e:	f000 f8c5 	bl	80025bc <_malloc_r>
 8002432:	4604      	mov	r4, r0
 8002434:	b140      	cbz	r0, 8002448 <__sfmoreglue+0x28>
 8002436:	2100      	movs	r1, #0
 8002438:	e9c0 1600 	strd	r1, r6, [r0]
 800243c:	300c      	adds	r0, #12
 800243e:	60a0      	str	r0, [r4, #8]
 8002440:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002444:	f7ff ffa2 	bl	800238c <memset>
 8002448:	4620      	mov	r0, r4
 800244a:	bd70      	pop	{r4, r5, r6, pc}

0800244c <__sfp_lock_acquire>:
 800244c:	4801      	ldr	r0, [pc, #4]	; (8002454 <__sfp_lock_acquire+0x8>)
 800244e:	f000 b8b3 	b.w	80025b8 <__retarget_lock_acquire_recursive>
 8002452:	bf00      	nop
 8002454:	200000f4 	.word	0x200000f4

08002458 <__sfp_lock_release>:
 8002458:	4801      	ldr	r0, [pc, #4]	; (8002460 <__sfp_lock_release+0x8>)
 800245a:	f000 b8ae 	b.w	80025ba <__retarget_lock_release_recursive>
 800245e:	bf00      	nop
 8002460:	200000f4 	.word	0x200000f4

08002464 <__sinit_lock_acquire>:
 8002464:	4801      	ldr	r0, [pc, #4]	; (800246c <__sinit_lock_acquire+0x8>)
 8002466:	f000 b8a7 	b.w	80025b8 <__retarget_lock_acquire_recursive>
 800246a:	bf00      	nop
 800246c:	200000ef 	.word	0x200000ef

08002470 <__sinit_lock_release>:
 8002470:	4801      	ldr	r0, [pc, #4]	; (8002478 <__sinit_lock_release+0x8>)
 8002472:	f000 b8a2 	b.w	80025ba <__retarget_lock_release_recursive>
 8002476:	bf00      	nop
 8002478:	200000ef 	.word	0x200000ef

0800247c <__sinit>:
 800247c:	b510      	push	{r4, lr}
 800247e:	4604      	mov	r4, r0
 8002480:	f7ff fff0 	bl	8002464 <__sinit_lock_acquire>
 8002484:	69a3      	ldr	r3, [r4, #24]
 8002486:	b11b      	cbz	r3, 8002490 <__sinit+0x14>
 8002488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800248c:	f7ff bff0 	b.w	8002470 <__sinit_lock_release>
 8002490:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002494:	6523      	str	r3, [r4, #80]	; 0x50
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <__sinit+0x68>)
 8002498:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <__sinit+0x6c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	62a2      	str	r2, [r4, #40]	; 0x28
 800249e:	42a3      	cmp	r3, r4
 80024a0:	bf04      	itt	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	61a3      	streq	r3, [r4, #24]
 80024a6:	4620      	mov	r0, r4
 80024a8:	f000 f820 	bl	80024ec <__sfp>
 80024ac:	6060      	str	r0, [r4, #4]
 80024ae:	4620      	mov	r0, r4
 80024b0:	f000 f81c 	bl	80024ec <__sfp>
 80024b4:	60a0      	str	r0, [r4, #8]
 80024b6:	4620      	mov	r0, r4
 80024b8:	f000 f818 	bl	80024ec <__sfp>
 80024bc:	2200      	movs	r2, #0
 80024be:	60e0      	str	r0, [r4, #12]
 80024c0:	2104      	movs	r1, #4
 80024c2:	6860      	ldr	r0, [r4, #4]
 80024c4:	f7ff ff82 	bl	80023cc <std>
 80024c8:	68a0      	ldr	r0, [r4, #8]
 80024ca:	2201      	movs	r2, #1
 80024cc:	2109      	movs	r1, #9
 80024ce:	f7ff ff7d 	bl	80023cc <std>
 80024d2:	68e0      	ldr	r0, [r4, #12]
 80024d4:	2202      	movs	r2, #2
 80024d6:	2112      	movs	r1, #18
 80024d8:	f7ff ff78 	bl	80023cc <std>
 80024dc:	2301      	movs	r3, #1
 80024de:	61a3      	str	r3, [r4, #24]
 80024e0:	e7d2      	b.n	8002488 <__sinit+0xc>
 80024e2:	bf00      	nop
 80024e4:	08003300 	.word	0x08003300
 80024e8:	08002415 	.word	0x08002415

080024ec <__sfp>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	4607      	mov	r7, r0
 80024f0:	f7ff ffac 	bl	800244c <__sfp_lock_acquire>
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <__sfp+0x84>)
 80024f6:	681e      	ldr	r6, [r3, #0]
 80024f8:	69b3      	ldr	r3, [r6, #24]
 80024fa:	b913      	cbnz	r3, 8002502 <__sfp+0x16>
 80024fc:	4630      	mov	r0, r6
 80024fe:	f7ff ffbd 	bl	800247c <__sinit>
 8002502:	3648      	adds	r6, #72	; 0x48
 8002504:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002508:	3b01      	subs	r3, #1
 800250a:	d503      	bpl.n	8002514 <__sfp+0x28>
 800250c:	6833      	ldr	r3, [r6, #0]
 800250e:	b30b      	cbz	r3, 8002554 <__sfp+0x68>
 8002510:	6836      	ldr	r6, [r6, #0]
 8002512:	e7f7      	b.n	8002504 <__sfp+0x18>
 8002514:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002518:	b9d5      	cbnz	r5, 8002550 <__sfp+0x64>
 800251a:	4b16      	ldr	r3, [pc, #88]	; (8002574 <__sfp+0x88>)
 800251c:	60e3      	str	r3, [r4, #12]
 800251e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002522:	6665      	str	r5, [r4, #100]	; 0x64
 8002524:	f000 f847 	bl	80025b6 <__retarget_lock_init_recursive>
 8002528:	f7ff ff96 	bl	8002458 <__sfp_lock_release>
 800252c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002530:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002534:	6025      	str	r5, [r4, #0]
 8002536:	61a5      	str	r5, [r4, #24]
 8002538:	2208      	movs	r2, #8
 800253a:	4629      	mov	r1, r5
 800253c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002540:	f7ff ff24 	bl	800238c <memset>
 8002544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800254c:	4620      	mov	r0, r4
 800254e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002550:	3468      	adds	r4, #104	; 0x68
 8002552:	e7d9      	b.n	8002508 <__sfp+0x1c>
 8002554:	2104      	movs	r1, #4
 8002556:	4638      	mov	r0, r7
 8002558:	f7ff ff62 	bl	8002420 <__sfmoreglue>
 800255c:	4604      	mov	r4, r0
 800255e:	6030      	str	r0, [r6, #0]
 8002560:	2800      	cmp	r0, #0
 8002562:	d1d5      	bne.n	8002510 <__sfp+0x24>
 8002564:	f7ff ff78 	bl	8002458 <__sfp_lock_release>
 8002568:	230c      	movs	r3, #12
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	e7ee      	b.n	800254c <__sfp+0x60>
 800256e:	bf00      	nop
 8002570:	08003300 	.word	0x08003300
 8002574:	ffff0001 	.word	0xffff0001

08002578 <_fwalk_reent>:
 8002578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800257c:	4606      	mov	r6, r0
 800257e:	4688      	mov	r8, r1
 8002580:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002584:	2700      	movs	r7, #0
 8002586:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800258a:	f1b9 0901 	subs.w	r9, r9, #1
 800258e:	d505      	bpl.n	800259c <_fwalk_reent+0x24>
 8002590:	6824      	ldr	r4, [r4, #0]
 8002592:	2c00      	cmp	r4, #0
 8002594:	d1f7      	bne.n	8002586 <_fwalk_reent+0xe>
 8002596:	4638      	mov	r0, r7
 8002598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800259c:	89ab      	ldrh	r3, [r5, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d907      	bls.n	80025b2 <_fwalk_reent+0x3a>
 80025a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025a6:	3301      	adds	r3, #1
 80025a8:	d003      	beq.n	80025b2 <_fwalk_reent+0x3a>
 80025aa:	4629      	mov	r1, r5
 80025ac:	4630      	mov	r0, r6
 80025ae:	47c0      	blx	r8
 80025b0:	4307      	orrs	r7, r0
 80025b2:	3568      	adds	r5, #104	; 0x68
 80025b4:	e7e9      	b.n	800258a <_fwalk_reent+0x12>

080025b6 <__retarget_lock_init_recursive>:
 80025b6:	4770      	bx	lr

080025b8 <__retarget_lock_acquire_recursive>:
 80025b8:	4770      	bx	lr

080025ba <__retarget_lock_release_recursive>:
 80025ba:	4770      	bx	lr

080025bc <_malloc_r>:
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025be:	1ccd      	adds	r5, r1, #3
 80025c0:	f025 0503 	bic.w	r5, r5, #3
 80025c4:	3508      	adds	r5, #8
 80025c6:	2d0c      	cmp	r5, #12
 80025c8:	bf38      	it	cc
 80025ca:	250c      	movcc	r5, #12
 80025cc:	2d00      	cmp	r5, #0
 80025ce:	4606      	mov	r6, r0
 80025d0:	db01      	blt.n	80025d6 <_malloc_r+0x1a>
 80025d2:	42a9      	cmp	r1, r5
 80025d4:	d903      	bls.n	80025de <_malloc_r+0x22>
 80025d6:	230c      	movs	r3, #12
 80025d8:	6033      	str	r3, [r6, #0]
 80025da:	2000      	movs	r0, #0
 80025dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025de:	f000 fda3 	bl	8003128 <__malloc_lock>
 80025e2:	4921      	ldr	r1, [pc, #132]	; (8002668 <_malloc_r+0xac>)
 80025e4:	680a      	ldr	r2, [r1, #0]
 80025e6:	4614      	mov	r4, r2
 80025e8:	b99c      	cbnz	r4, 8002612 <_malloc_r+0x56>
 80025ea:	4f20      	ldr	r7, [pc, #128]	; (800266c <_malloc_r+0xb0>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b923      	cbnz	r3, 80025fa <_malloc_r+0x3e>
 80025f0:	4621      	mov	r1, r4
 80025f2:	4630      	mov	r0, r6
 80025f4:	f000 fb2a 	bl	8002c4c <_sbrk_r>
 80025f8:	6038      	str	r0, [r7, #0]
 80025fa:	4629      	mov	r1, r5
 80025fc:	4630      	mov	r0, r6
 80025fe:	f000 fb25 	bl	8002c4c <_sbrk_r>
 8002602:	1c43      	adds	r3, r0, #1
 8002604:	d123      	bne.n	800264e <_malloc_r+0x92>
 8002606:	230c      	movs	r3, #12
 8002608:	6033      	str	r3, [r6, #0]
 800260a:	4630      	mov	r0, r6
 800260c:	f000 fd92 	bl	8003134 <__malloc_unlock>
 8002610:	e7e3      	b.n	80025da <_malloc_r+0x1e>
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	1b5b      	subs	r3, r3, r5
 8002616:	d417      	bmi.n	8002648 <_malloc_r+0x8c>
 8002618:	2b0b      	cmp	r3, #11
 800261a:	d903      	bls.n	8002624 <_malloc_r+0x68>
 800261c:	6023      	str	r3, [r4, #0]
 800261e:	441c      	add	r4, r3
 8002620:	6025      	str	r5, [r4, #0]
 8002622:	e004      	b.n	800262e <_malloc_r+0x72>
 8002624:	6863      	ldr	r3, [r4, #4]
 8002626:	42a2      	cmp	r2, r4
 8002628:	bf0c      	ite	eq
 800262a:	600b      	streq	r3, [r1, #0]
 800262c:	6053      	strne	r3, [r2, #4]
 800262e:	4630      	mov	r0, r6
 8002630:	f000 fd80 	bl	8003134 <__malloc_unlock>
 8002634:	f104 000b 	add.w	r0, r4, #11
 8002638:	1d23      	adds	r3, r4, #4
 800263a:	f020 0007 	bic.w	r0, r0, #7
 800263e:	1ac2      	subs	r2, r0, r3
 8002640:	d0cc      	beq.n	80025dc <_malloc_r+0x20>
 8002642:	1a1b      	subs	r3, r3, r0
 8002644:	50a3      	str	r3, [r4, r2]
 8002646:	e7c9      	b.n	80025dc <_malloc_r+0x20>
 8002648:	4622      	mov	r2, r4
 800264a:	6864      	ldr	r4, [r4, #4]
 800264c:	e7cc      	b.n	80025e8 <_malloc_r+0x2c>
 800264e:	1cc4      	adds	r4, r0, #3
 8002650:	f024 0403 	bic.w	r4, r4, #3
 8002654:	42a0      	cmp	r0, r4
 8002656:	d0e3      	beq.n	8002620 <_malloc_r+0x64>
 8002658:	1a21      	subs	r1, r4, r0
 800265a:	4630      	mov	r0, r6
 800265c:	f000 faf6 	bl	8002c4c <_sbrk_r>
 8002660:	3001      	adds	r0, #1
 8002662:	d1dd      	bne.n	8002620 <_malloc_r+0x64>
 8002664:	e7cf      	b.n	8002606 <_malloc_r+0x4a>
 8002666:	bf00      	nop
 8002668:	2000009c 	.word	0x2000009c
 800266c:	200000a0 	.word	0x200000a0

08002670 <__sfputc_r>:
 8002670:	6893      	ldr	r3, [r2, #8]
 8002672:	3b01      	subs	r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	b410      	push	{r4}
 8002678:	6093      	str	r3, [r2, #8]
 800267a:	da08      	bge.n	800268e <__sfputc_r+0x1e>
 800267c:	6994      	ldr	r4, [r2, #24]
 800267e:	42a3      	cmp	r3, r4
 8002680:	db01      	blt.n	8002686 <__sfputc_r+0x16>
 8002682:	290a      	cmp	r1, #10
 8002684:	d103      	bne.n	800268e <__sfputc_r+0x1e>
 8002686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800268a:	f000 bb33 	b.w	8002cf4 <__swbuf_r>
 800268e:	6813      	ldr	r3, [r2, #0]
 8002690:	1c58      	adds	r0, r3, #1
 8002692:	6010      	str	r0, [r2, #0]
 8002694:	7019      	strb	r1, [r3, #0]
 8002696:	4608      	mov	r0, r1
 8002698:	f85d 4b04 	ldr.w	r4, [sp], #4
 800269c:	4770      	bx	lr

0800269e <__sfputs_r>:
 800269e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a0:	4606      	mov	r6, r0
 80026a2:	460f      	mov	r7, r1
 80026a4:	4614      	mov	r4, r2
 80026a6:	18d5      	adds	r5, r2, r3
 80026a8:	42ac      	cmp	r4, r5
 80026aa:	d101      	bne.n	80026b0 <__sfputs_r+0x12>
 80026ac:	2000      	movs	r0, #0
 80026ae:	e007      	b.n	80026c0 <__sfputs_r+0x22>
 80026b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026b4:	463a      	mov	r2, r7
 80026b6:	4630      	mov	r0, r6
 80026b8:	f7ff ffda 	bl	8002670 <__sfputc_r>
 80026bc:	1c43      	adds	r3, r0, #1
 80026be:	d1f3      	bne.n	80026a8 <__sfputs_r+0xa>
 80026c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080026c4 <_vfiprintf_r>:
 80026c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c8:	460d      	mov	r5, r1
 80026ca:	b09d      	sub	sp, #116	; 0x74
 80026cc:	4614      	mov	r4, r2
 80026ce:	4698      	mov	r8, r3
 80026d0:	4606      	mov	r6, r0
 80026d2:	b118      	cbz	r0, 80026dc <_vfiprintf_r+0x18>
 80026d4:	6983      	ldr	r3, [r0, #24]
 80026d6:	b90b      	cbnz	r3, 80026dc <_vfiprintf_r+0x18>
 80026d8:	f7ff fed0 	bl	800247c <__sinit>
 80026dc:	4b89      	ldr	r3, [pc, #548]	; (8002904 <_vfiprintf_r+0x240>)
 80026de:	429d      	cmp	r5, r3
 80026e0:	d11b      	bne.n	800271a <_vfiprintf_r+0x56>
 80026e2:	6875      	ldr	r5, [r6, #4]
 80026e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026e6:	07d9      	lsls	r1, r3, #31
 80026e8:	d405      	bmi.n	80026f6 <_vfiprintf_r+0x32>
 80026ea:	89ab      	ldrh	r3, [r5, #12]
 80026ec:	059a      	lsls	r2, r3, #22
 80026ee:	d402      	bmi.n	80026f6 <_vfiprintf_r+0x32>
 80026f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80026f2:	f7ff ff61 	bl	80025b8 <__retarget_lock_acquire_recursive>
 80026f6:	89ab      	ldrh	r3, [r5, #12]
 80026f8:	071b      	lsls	r3, r3, #28
 80026fa:	d501      	bpl.n	8002700 <_vfiprintf_r+0x3c>
 80026fc:	692b      	ldr	r3, [r5, #16]
 80026fe:	b9eb      	cbnz	r3, 800273c <_vfiprintf_r+0x78>
 8002700:	4629      	mov	r1, r5
 8002702:	4630      	mov	r0, r6
 8002704:	f000 fb5a 	bl	8002dbc <__swsetup_r>
 8002708:	b1c0      	cbz	r0, 800273c <_vfiprintf_r+0x78>
 800270a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800270c:	07dc      	lsls	r4, r3, #31
 800270e:	d50e      	bpl.n	800272e <_vfiprintf_r+0x6a>
 8002710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002714:	b01d      	add	sp, #116	; 0x74
 8002716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800271a:	4b7b      	ldr	r3, [pc, #492]	; (8002908 <_vfiprintf_r+0x244>)
 800271c:	429d      	cmp	r5, r3
 800271e:	d101      	bne.n	8002724 <_vfiprintf_r+0x60>
 8002720:	68b5      	ldr	r5, [r6, #8]
 8002722:	e7df      	b.n	80026e4 <_vfiprintf_r+0x20>
 8002724:	4b79      	ldr	r3, [pc, #484]	; (800290c <_vfiprintf_r+0x248>)
 8002726:	429d      	cmp	r5, r3
 8002728:	bf08      	it	eq
 800272a:	68f5      	ldreq	r5, [r6, #12]
 800272c:	e7da      	b.n	80026e4 <_vfiprintf_r+0x20>
 800272e:	89ab      	ldrh	r3, [r5, #12]
 8002730:	0598      	lsls	r0, r3, #22
 8002732:	d4ed      	bmi.n	8002710 <_vfiprintf_r+0x4c>
 8002734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002736:	f7ff ff40 	bl	80025ba <__retarget_lock_release_recursive>
 800273a:	e7e9      	b.n	8002710 <_vfiprintf_r+0x4c>
 800273c:	2300      	movs	r3, #0
 800273e:	9309      	str	r3, [sp, #36]	; 0x24
 8002740:	2320      	movs	r3, #32
 8002742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002746:	f8cd 800c 	str.w	r8, [sp, #12]
 800274a:	2330      	movs	r3, #48	; 0x30
 800274c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002910 <_vfiprintf_r+0x24c>
 8002750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002754:	f04f 0901 	mov.w	r9, #1
 8002758:	4623      	mov	r3, r4
 800275a:	469a      	mov	sl, r3
 800275c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002760:	b10a      	cbz	r2, 8002766 <_vfiprintf_r+0xa2>
 8002762:	2a25      	cmp	r2, #37	; 0x25
 8002764:	d1f9      	bne.n	800275a <_vfiprintf_r+0x96>
 8002766:	ebba 0b04 	subs.w	fp, sl, r4
 800276a:	d00b      	beq.n	8002784 <_vfiprintf_r+0xc0>
 800276c:	465b      	mov	r3, fp
 800276e:	4622      	mov	r2, r4
 8002770:	4629      	mov	r1, r5
 8002772:	4630      	mov	r0, r6
 8002774:	f7ff ff93 	bl	800269e <__sfputs_r>
 8002778:	3001      	adds	r0, #1
 800277a:	f000 80aa 	beq.w	80028d2 <_vfiprintf_r+0x20e>
 800277e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002780:	445a      	add	r2, fp
 8002782:	9209      	str	r2, [sp, #36]	; 0x24
 8002784:	f89a 3000 	ldrb.w	r3, [sl]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a2 	beq.w	80028d2 <_vfiprintf_r+0x20e>
 800278e:	2300      	movs	r3, #0
 8002790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002798:	f10a 0a01 	add.w	sl, sl, #1
 800279c:	9304      	str	r3, [sp, #16]
 800279e:	9307      	str	r3, [sp, #28]
 80027a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027a4:	931a      	str	r3, [sp, #104]	; 0x68
 80027a6:	4654      	mov	r4, sl
 80027a8:	2205      	movs	r2, #5
 80027aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027ae:	4858      	ldr	r0, [pc, #352]	; (8002910 <_vfiprintf_r+0x24c>)
 80027b0:	f7fd fd1e 	bl	80001f0 <memchr>
 80027b4:	9a04      	ldr	r2, [sp, #16]
 80027b6:	b9d8      	cbnz	r0, 80027f0 <_vfiprintf_r+0x12c>
 80027b8:	06d1      	lsls	r1, r2, #27
 80027ba:	bf44      	itt	mi
 80027bc:	2320      	movmi	r3, #32
 80027be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027c2:	0713      	lsls	r3, r2, #28
 80027c4:	bf44      	itt	mi
 80027c6:	232b      	movmi	r3, #43	; 0x2b
 80027c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027cc:	f89a 3000 	ldrb.w	r3, [sl]
 80027d0:	2b2a      	cmp	r3, #42	; 0x2a
 80027d2:	d015      	beq.n	8002800 <_vfiprintf_r+0x13c>
 80027d4:	9a07      	ldr	r2, [sp, #28]
 80027d6:	4654      	mov	r4, sl
 80027d8:	2000      	movs	r0, #0
 80027da:	f04f 0c0a 	mov.w	ip, #10
 80027de:	4621      	mov	r1, r4
 80027e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027e4:	3b30      	subs	r3, #48	; 0x30
 80027e6:	2b09      	cmp	r3, #9
 80027e8:	d94e      	bls.n	8002888 <_vfiprintf_r+0x1c4>
 80027ea:	b1b0      	cbz	r0, 800281a <_vfiprintf_r+0x156>
 80027ec:	9207      	str	r2, [sp, #28]
 80027ee:	e014      	b.n	800281a <_vfiprintf_r+0x156>
 80027f0:	eba0 0308 	sub.w	r3, r0, r8
 80027f4:	fa09 f303 	lsl.w	r3, r9, r3
 80027f8:	4313      	orrs	r3, r2
 80027fa:	9304      	str	r3, [sp, #16]
 80027fc:	46a2      	mov	sl, r4
 80027fe:	e7d2      	b.n	80027a6 <_vfiprintf_r+0xe2>
 8002800:	9b03      	ldr	r3, [sp, #12]
 8002802:	1d19      	adds	r1, r3, #4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	9103      	str	r1, [sp, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	bfbb      	ittet	lt
 800280c:	425b      	neglt	r3, r3
 800280e:	f042 0202 	orrlt.w	r2, r2, #2
 8002812:	9307      	strge	r3, [sp, #28]
 8002814:	9307      	strlt	r3, [sp, #28]
 8002816:	bfb8      	it	lt
 8002818:	9204      	strlt	r2, [sp, #16]
 800281a:	7823      	ldrb	r3, [r4, #0]
 800281c:	2b2e      	cmp	r3, #46	; 0x2e
 800281e:	d10c      	bne.n	800283a <_vfiprintf_r+0x176>
 8002820:	7863      	ldrb	r3, [r4, #1]
 8002822:	2b2a      	cmp	r3, #42	; 0x2a
 8002824:	d135      	bne.n	8002892 <_vfiprintf_r+0x1ce>
 8002826:	9b03      	ldr	r3, [sp, #12]
 8002828:	1d1a      	adds	r2, r3, #4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	9203      	str	r2, [sp, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	bfb8      	it	lt
 8002832:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002836:	3402      	adds	r4, #2
 8002838:	9305      	str	r3, [sp, #20]
 800283a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002920 <_vfiprintf_r+0x25c>
 800283e:	7821      	ldrb	r1, [r4, #0]
 8002840:	2203      	movs	r2, #3
 8002842:	4650      	mov	r0, sl
 8002844:	f7fd fcd4 	bl	80001f0 <memchr>
 8002848:	b140      	cbz	r0, 800285c <_vfiprintf_r+0x198>
 800284a:	2340      	movs	r3, #64	; 0x40
 800284c:	eba0 000a 	sub.w	r0, r0, sl
 8002850:	fa03 f000 	lsl.w	r0, r3, r0
 8002854:	9b04      	ldr	r3, [sp, #16]
 8002856:	4303      	orrs	r3, r0
 8002858:	3401      	adds	r4, #1
 800285a:	9304      	str	r3, [sp, #16]
 800285c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002860:	482c      	ldr	r0, [pc, #176]	; (8002914 <_vfiprintf_r+0x250>)
 8002862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002866:	2206      	movs	r2, #6
 8002868:	f7fd fcc2 	bl	80001f0 <memchr>
 800286c:	2800      	cmp	r0, #0
 800286e:	d03f      	beq.n	80028f0 <_vfiprintf_r+0x22c>
 8002870:	4b29      	ldr	r3, [pc, #164]	; (8002918 <_vfiprintf_r+0x254>)
 8002872:	bb1b      	cbnz	r3, 80028bc <_vfiprintf_r+0x1f8>
 8002874:	9b03      	ldr	r3, [sp, #12]
 8002876:	3307      	adds	r3, #7
 8002878:	f023 0307 	bic.w	r3, r3, #7
 800287c:	3308      	adds	r3, #8
 800287e:	9303      	str	r3, [sp, #12]
 8002880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002882:	443b      	add	r3, r7
 8002884:	9309      	str	r3, [sp, #36]	; 0x24
 8002886:	e767      	b.n	8002758 <_vfiprintf_r+0x94>
 8002888:	fb0c 3202 	mla	r2, ip, r2, r3
 800288c:	460c      	mov	r4, r1
 800288e:	2001      	movs	r0, #1
 8002890:	e7a5      	b.n	80027de <_vfiprintf_r+0x11a>
 8002892:	2300      	movs	r3, #0
 8002894:	3401      	adds	r4, #1
 8002896:	9305      	str	r3, [sp, #20]
 8002898:	4619      	mov	r1, r3
 800289a:	f04f 0c0a 	mov.w	ip, #10
 800289e:	4620      	mov	r0, r4
 80028a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028a4:	3a30      	subs	r2, #48	; 0x30
 80028a6:	2a09      	cmp	r2, #9
 80028a8:	d903      	bls.n	80028b2 <_vfiprintf_r+0x1ee>
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0c5      	beq.n	800283a <_vfiprintf_r+0x176>
 80028ae:	9105      	str	r1, [sp, #20]
 80028b0:	e7c3      	b.n	800283a <_vfiprintf_r+0x176>
 80028b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80028b6:	4604      	mov	r4, r0
 80028b8:	2301      	movs	r3, #1
 80028ba:	e7f0      	b.n	800289e <_vfiprintf_r+0x1da>
 80028bc:	ab03      	add	r3, sp, #12
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	462a      	mov	r2, r5
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <_vfiprintf_r+0x258>)
 80028c4:	a904      	add	r1, sp, #16
 80028c6:	4630      	mov	r0, r6
 80028c8:	f3af 8000 	nop.w
 80028cc:	4607      	mov	r7, r0
 80028ce:	1c78      	adds	r0, r7, #1
 80028d0:	d1d6      	bne.n	8002880 <_vfiprintf_r+0x1bc>
 80028d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028d4:	07d9      	lsls	r1, r3, #31
 80028d6:	d405      	bmi.n	80028e4 <_vfiprintf_r+0x220>
 80028d8:	89ab      	ldrh	r3, [r5, #12]
 80028da:	059a      	lsls	r2, r3, #22
 80028dc:	d402      	bmi.n	80028e4 <_vfiprintf_r+0x220>
 80028de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028e0:	f7ff fe6b 	bl	80025ba <__retarget_lock_release_recursive>
 80028e4:	89ab      	ldrh	r3, [r5, #12]
 80028e6:	065b      	lsls	r3, r3, #25
 80028e8:	f53f af12 	bmi.w	8002710 <_vfiprintf_r+0x4c>
 80028ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80028ee:	e711      	b.n	8002714 <_vfiprintf_r+0x50>
 80028f0:	ab03      	add	r3, sp, #12
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	462a      	mov	r2, r5
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <_vfiprintf_r+0x258>)
 80028f8:	a904      	add	r1, sp, #16
 80028fa:	4630      	mov	r0, r6
 80028fc:	f000 f880 	bl	8002a00 <_printf_i>
 8002900:	e7e4      	b.n	80028cc <_vfiprintf_r+0x208>
 8002902:	bf00      	nop
 8002904:	08003324 	.word	0x08003324
 8002908:	08003344 	.word	0x08003344
 800290c:	08003304 	.word	0x08003304
 8002910:	08003364 	.word	0x08003364
 8002914:	0800336e 	.word	0x0800336e
 8002918:	00000000 	.word	0x00000000
 800291c:	0800269f 	.word	0x0800269f
 8002920:	0800336a 	.word	0x0800336a

08002924 <_printf_common>:
 8002924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002928:	4616      	mov	r6, r2
 800292a:	4699      	mov	r9, r3
 800292c:	688a      	ldr	r2, [r1, #8]
 800292e:	690b      	ldr	r3, [r1, #16]
 8002930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002934:	4293      	cmp	r3, r2
 8002936:	bfb8      	it	lt
 8002938:	4613      	movlt	r3, r2
 800293a:	6033      	str	r3, [r6, #0]
 800293c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002940:	4607      	mov	r7, r0
 8002942:	460c      	mov	r4, r1
 8002944:	b10a      	cbz	r2, 800294a <_printf_common+0x26>
 8002946:	3301      	adds	r3, #1
 8002948:	6033      	str	r3, [r6, #0]
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	0699      	lsls	r1, r3, #26
 800294e:	bf42      	ittt	mi
 8002950:	6833      	ldrmi	r3, [r6, #0]
 8002952:	3302      	addmi	r3, #2
 8002954:	6033      	strmi	r3, [r6, #0]
 8002956:	6825      	ldr	r5, [r4, #0]
 8002958:	f015 0506 	ands.w	r5, r5, #6
 800295c:	d106      	bne.n	800296c <_printf_common+0x48>
 800295e:	f104 0a19 	add.w	sl, r4, #25
 8002962:	68e3      	ldr	r3, [r4, #12]
 8002964:	6832      	ldr	r2, [r6, #0]
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	42ab      	cmp	r3, r5
 800296a:	dc26      	bgt.n	80029ba <_printf_common+0x96>
 800296c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002970:	1e13      	subs	r3, r2, #0
 8002972:	6822      	ldr	r2, [r4, #0]
 8002974:	bf18      	it	ne
 8002976:	2301      	movne	r3, #1
 8002978:	0692      	lsls	r2, r2, #26
 800297a:	d42b      	bmi.n	80029d4 <_printf_common+0xb0>
 800297c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002980:	4649      	mov	r1, r9
 8002982:	4638      	mov	r0, r7
 8002984:	47c0      	blx	r8
 8002986:	3001      	adds	r0, #1
 8002988:	d01e      	beq.n	80029c8 <_printf_common+0xa4>
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	68e5      	ldr	r5, [r4, #12]
 800298e:	6832      	ldr	r2, [r6, #0]
 8002990:	f003 0306 	and.w	r3, r3, #6
 8002994:	2b04      	cmp	r3, #4
 8002996:	bf08      	it	eq
 8002998:	1aad      	subeq	r5, r5, r2
 800299a:	68a3      	ldr	r3, [r4, #8]
 800299c:	6922      	ldr	r2, [r4, #16]
 800299e:	bf0c      	ite	eq
 80029a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029a4:	2500      	movne	r5, #0
 80029a6:	4293      	cmp	r3, r2
 80029a8:	bfc4      	itt	gt
 80029aa:	1a9b      	subgt	r3, r3, r2
 80029ac:	18ed      	addgt	r5, r5, r3
 80029ae:	2600      	movs	r6, #0
 80029b0:	341a      	adds	r4, #26
 80029b2:	42b5      	cmp	r5, r6
 80029b4:	d11a      	bne.n	80029ec <_printf_common+0xc8>
 80029b6:	2000      	movs	r0, #0
 80029b8:	e008      	b.n	80029cc <_printf_common+0xa8>
 80029ba:	2301      	movs	r3, #1
 80029bc:	4652      	mov	r2, sl
 80029be:	4649      	mov	r1, r9
 80029c0:	4638      	mov	r0, r7
 80029c2:	47c0      	blx	r8
 80029c4:	3001      	adds	r0, #1
 80029c6:	d103      	bne.n	80029d0 <_printf_common+0xac>
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029d0:	3501      	adds	r5, #1
 80029d2:	e7c6      	b.n	8002962 <_printf_common+0x3e>
 80029d4:	18e1      	adds	r1, r4, r3
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	2030      	movs	r0, #48	; 0x30
 80029da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029de:	4422      	add	r2, r4
 80029e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029e8:	3302      	adds	r3, #2
 80029ea:	e7c7      	b.n	800297c <_printf_common+0x58>
 80029ec:	2301      	movs	r3, #1
 80029ee:	4622      	mov	r2, r4
 80029f0:	4649      	mov	r1, r9
 80029f2:	4638      	mov	r0, r7
 80029f4:	47c0      	blx	r8
 80029f6:	3001      	adds	r0, #1
 80029f8:	d0e6      	beq.n	80029c8 <_printf_common+0xa4>
 80029fa:	3601      	adds	r6, #1
 80029fc:	e7d9      	b.n	80029b2 <_printf_common+0x8e>
	...

08002a00 <_printf_i>:
 8002a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a04:	460c      	mov	r4, r1
 8002a06:	4691      	mov	r9, r2
 8002a08:	7e27      	ldrb	r7, [r4, #24]
 8002a0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002a0c:	2f78      	cmp	r7, #120	; 0x78
 8002a0e:	4680      	mov	r8, r0
 8002a10:	469a      	mov	sl, r3
 8002a12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a16:	d807      	bhi.n	8002a28 <_printf_i+0x28>
 8002a18:	2f62      	cmp	r7, #98	; 0x62
 8002a1a:	d80a      	bhi.n	8002a32 <_printf_i+0x32>
 8002a1c:	2f00      	cmp	r7, #0
 8002a1e:	f000 80d8 	beq.w	8002bd2 <_printf_i+0x1d2>
 8002a22:	2f58      	cmp	r7, #88	; 0x58
 8002a24:	f000 80a3 	beq.w	8002b6e <_printf_i+0x16e>
 8002a28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002a2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a30:	e03a      	b.n	8002aa8 <_printf_i+0xa8>
 8002a32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a36:	2b15      	cmp	r3, #21
 8002a38:	d8f6      	bhi.n	8002a28 <_printf_i+0x28>
 8002a3a:	a001      	add	r0, pc, #4	; (adr r0, 8002a40 <_printf_i+0x40>)
 8002a3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002a40:	08002a99 	.word	0x08002a99
 8002a44:	08002aad 	.word	0x08002aad
 8002a48:	08002a29 	.word	0x08002a29
 8002a4c:	08002a29 	.word	0x08002a29
 8002a50:	08002a29 	.word	0x08002a29
 8002a54:	08002a29 	.word	0x08002a29
 8002a58:	08002aad 	.word	0x08002aad
 8002a5c:	08002a29 	.word	0x08002a29
 8002a60:	08002a29 	.word	0x08002a29
 8002a64:	08002a29 	.word	0x08002a29
 8002a68:	08002a29 	.word	0x08002a29
 8002a6c:	08002bb9 	.word	0x08002bb9
 8002a70:	08002add 	.word	0x08002add
 8002a74:	08002b9b 	.word	0x08002b9b
 8002a78:	08002a29 	.word	0x08002a29
 8002a7c:	08002a29 	.word	0x08002a29
 8002a80:	08002bdb 	.word	0x08002bdb
 8002a84:	08002a29 	.word	0x08002a29
 8002a88:	08002add 	.word	0x08002add
 8002a8c:	08002a29 	.word	0x08002a29
 8002a90:	08002a29 	.word	0x08002a29
 8002a94:	08002ba3 	.word	0x08002ba3
 8002a98:	680b      	ldr	r3, [r1, #0]
 8002a9a:	1d1a      	adds	r2, r3, #4
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	600a      	str	r2, [r1, #0]
 8002aa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0a3      	b.n	8002bf4 <_printf_i+0x1f4>
 8002aac:	6825      	ldr	r5, [r4, #0]
 8002aae:	6808      	ldr	r0, [r1, #0]
 8002ab0:	062e      	lsls	r6, r5, #24
 8002ab2:	f100 0304 	add.w	r3, r0, #4
 8002ab6:	d50a      	bpl.n	8002ace <_printf_i+0xce>
 8002ab8:	6805      	ldr	r5, [r0, #0]
 8002aba:	600b      	str	r3, [r1, #0]
 8002abc:	2d00      	cmp	r5, #0
 8002abe:	da03      	bge.n	8002ac8 <_printf_i+0xc8>
 8002ac0:	232d      	movs	r3, #45	; 0x2d
 8002ac2:	426d      	negs	r5, r5
 8002ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ac8:	485e      	ldr	r0, [pc, #376]	; (8002c44 <_printf_i+0x244>)
 8002aca:	230a      	movs	r3, #10
 8002acc:	e019      	b.n	8002b02 <_printf_i+0x102>
 8002ace:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002ad2:	6805      	ldr	r5, [r0, #0]
 8002ad4:	600b      	str	r3, [r1, #0]
 8002ad6:	bf18      	it	ne
 8002ad8:	b22d      	sxthne	r5, r5
 8002ada:	e7ef      	b.n	8002abc <_printf_i+0xbc>
 8002adc:	680b      	ldr	r3, [r1, #0]
 8002ade:	6825      	ldr	r5, [r4, #0]
 8002ae0:	1d18      	adds	r0, r3, #4
 8002ae2:	6008      	str	r0, [r1, #0]
 8002ae4:	0628      	lsls	r0, r5, #24
 8002ae6:	d501      	bpl.n	8002aec <_printf_i+0xec>
 8002ae8:	681d      	ldr	r5, [r3, #0]
 8002aea:	e002      	b.n	8002af2 <_printf_i+0xf2>
 8002aec:	0669      	lsls	r1, r5, #25
 8002aee:	d5fb      	bpl.n	8002ae8 <_printf_i+0xe8>
 8002af0:	881d      	ldrh	r5, [r3, #0]
 8002af2:	4854      	ldr	r0, [pc, #336]	; (8002c44 <_printf_i+0x244>)
 8002af4:	2f6f      	cmp	r7, #111	; 0x6f
 8002af6:	bf0c      	ite	eq
 8002af8:	2308      	moveq	r3, #8
 8002afa:	230a      	movne	r3, #10
 8002afc:	2100      	movs	r1, #0
 8002afe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b02:	6866      	ldr	r6, [r4, #4]
 8002b04:	60a6      	str	r6, [r4, #8]
 8002b06:	2e00      	cmp	r6, #0
 8002b08:	bfa2      	ittt	ge
 8002b0a:	6821      	ldrge	r1, [r4, #0]
 8002b0c:	f021 0104 	bicge.w	r1, r1, #4
 8002b10:	6021      	strge	r1, [r4, #0]
 8002b12:	b90d      	cbnz	r5, 8002b18 <_printf_i+0x118>
 8002b14:	2e00      	cmp	r6, #0
 8002b16:	d04d      	beq.n	8002bb4 <_printf_i+0x1b4>
 8002b18:	4616      	mov	r6, r2
 8002b1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b1e:	fb03 5711 	mls	r7, r3, r1, r5
 8002b22:	5dc7      	ldrb	r7, [r0, r7]
 8002b24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b28:	462f      	mov	r7, r5
 8002b2a:	42bb      	cmp	r3, r7
 8002b2c:	460d      	mov	r5, r1
 8002b2e:	d9f4      	bls.n	8002b1a <_printf_i+0x11a>
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d10b      	bne.n	8002b4c <_printf_i+0x14c>
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	07df      	lsls	r7, r3, #31
 8002b38:	d508      	bpl.n	8002b4c <_printf_i+0x14c>
 8002b3a:	6923      	ldr	r3, [r4, #16]
 8002b3c:	6861      	ldr	r1, [r4, #4]
 8002b3e:	4299      	cmp	r1, r3
 8002b40:	bfde      	ittt	le
 8002b42:	2330      	movle	r3, #48	; 0x30
 8002b44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b48:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002b4c:	1b92      	subs	r2, r2, r6
 8002b4e:	6122      	str	r2, [r4, #16]
 8002b50:	f8cd a000 	str.w	sl, [sp]
 8002b54:	464b      	mov	r3, r9
 8002b56:	aa03      	add	r2, sp, #12
 8002b58:	4621      	mov	r1, r4
 8002b5a:	4640      	mov	r0, r8
 8002b5c:	f7ff fee2 	bl	8002924 <_printf_common>
 8002b60:	3001      	adds	r0, #1
 8002b62:	d14c      	bne.n	8002bfe <_printf_i+0x1fe>
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b68:	b004      	add	sp, #16
 8002b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b6e:	4835      	ldr	r0, [pc, #212]	; (8002c44 <_printf_i+0x244>)
 8002b70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	680e      	ldr	r6, [r1, #0]
 8002b78:	061f      	lsls	r7, r3, #24
 8002b7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002b7e:	600e      	str	r6, [r1, #0]
 8002b80:	d514      	bpl.n	8002bac <_printf_i+0x1ac>
 8002b82:	07d9      	lsls	r1, r3, #31
 8002b84:	bf44      	itt	mi
 8002b86:	f043 0320 	orrmi.w	r3, r3, #32
 8002b8a:	6023      	strmi	r3, [r4, #0]
 8002b8c:	b91d      	cbnz	r5, 8002b96 <_printf_i+0x196>
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	f023 0320 	bic.w	r3, r3, #32
 8002b94:	6023      	str	r3, [r4, #0]
 8002b96:	2310      	movs	r3, #16
 8002b98:	e7b0      	b.n	8002afc <_printf_i+0xfc>
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	f043 0320 	orr.w	r3, r3, #32
 8002ba0:	6023      	str	r3, [r4, #0]
 8002ba2:	2378      	movs	r3, #120	; 0x78
 8002ba4:	4828      	ldr	r0, [pc, #160]	; (8002c48 <_printf_i+0x248>)
 8002ba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002baa:	e7e3      	b.n	8002b74 <_printf_i+0x174>
 8002bac:	065e      	lsls	r6, r3, #25
 8002bae:	bf48      	it	mi
 8002bb0:	b2ad      	uxthmi	r5, r5
 8002bb2:	e7e6      	b.n	8002b82 <_printf_i+0x182>
 8002bb4:	4616      	mov	r6, r2
 8002bb6:	e7bb      	b.n	8002b30 <_printf_i+0x130>
 8002bb8:	680b      	ldr	r3, [r1, #0]
 8002bba:	6826      	ldr	r6, [r4, #0]
 8002bbc:	6960      	ldr	r0, [r4, #20]
 8002bbe:	1d1d      	adds	r5, r3, #4
 8002bc0:	600d      	str	r5, [r1, #0]
 8002bc2:	0635      	lsls	r5, r6, #24
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	d501      	bpl.n	8002bcc <_printf_i+0x1cc>
 8002bc8:	6018      	str	r0, [r3, #0]
 8002bca:	e002      	b.n	8002bd2 <_printf_i+0x1d2>
 8002bcc:	0671      	lsls	r1, r6, #25
 8002bce:	d5fb      	bpl.n	8002bc8 <_printf_i+0x1c8>
 8002bd0:	8018      	strh	r0, [r3, #0]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	6123      	str	r3, [r4, #16]
 8002bd6:	4616      	mov	r6, r2
 8002bd8:	e7ba      	b.n	8002b50 <_printf_i+0x150>
 8002bda:	680b      	ldr	r3, [r1, #0]
 8002bdc:	1d1a      	adds	r2, r3, #4
 8002bde:	600a      	str	r2, [r1, #0]
 8002be0:	681e      	ldr	r6, [r3, #0]
 8002be2:	6862      	ldr	r2, [r4, #4]
 8002be4:	2100      	movs	r1, #0
 8002be6:	4630      	mov	r0, r6
 8002be8:	f7fd fb02 	bl	80001f0 <memchr>
 8002bec:	b108      	cbz	r0, 8002bf2 <_printf_i+0x1f2>
 8002bee:	1b80      	subs	r0, r0, r6
 8002bf0:	6060      	str	r0, [r4, #4]
 8002bf2:	6863      	ldr	r3, [r4, #4]
 8002bf4:	6123      	str	r3, [r4, #16]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bfc:	e7a8      	b.n	8002b50 <_printf_i+0x150>
 8002bfe:	6923      	ldr	r3, [r4, #16]
 8002c00:	4632      	mov	r2, r6
 8002c02:	4649      	mov	r1, r9
 8002c04:	4640      	mov	r0, r8
 8002c06:	47d0      	blx	sl
 8002c08:	3001      	adds	r0, #1
 8002c0a:	d0ab      	beq.n	8002b64 <_printf_i+0x164>
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	079b      	lsls	r3, r3, #30
 8002c10:	d413      	bmi.n	8002c3a <_printf_i+0x23a>
 8002c12:	68e0      	ldr	r0, [r4, #12]
 8002c14:	9b03      	ldr	r3, [sp, #12]
 8002c16:	4298      	cmp	r0, r3
 8002c18:	bfb8      	it	lt
 8002c1a:	4618      	movlt	r0, r3
 8002c1c:	e7a4      	b.n	8002b68 <_printf_i+0x168>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	4632      	mov	r2, r6
 8002c22:	4649      	mov	r1, r9
 8002c24:	4640      	mov	r0, r8
 8002c26:	47d0      	blx	sl
 8002c28:	3001      	adds	r0, #1
 8002c2a:	d09b      	beq.n	8002b64 <_printf_i+0x164>
 8002c2c:	3501      	adds	r5, #1
 8002c2e:	68e3      	ldr	r3, [r4, #12]
 8002c30:	9903      	ldr	r1, [sp, #12]
 8002c32:	1a5b      	subs	r3, r3, r1
 8002c34:	42ab      	cmp	r3, r5
 8002c36:	dcf2      	bgt.n	8002c1e <_printf_i+0x21e>
 8002c38:	e7eb      	b.n	8002c12 <_printf_i+0x212>
 8002c3a:	2500      	movs	r5, #0
 8002c3c:	f104 0619 	add.w	r6, r4, #25
 8002c40:	e7f5      	b.n	8002c2e <_printf_i+0x22e>
 8002c42:	bf00      	nop
 8002c44:	08003375 	.word	0x08003375
 8002c48:	08003386 	.word	0x08003386

08002c4c <_sbrk_r>:
 8002c4c:	b538      	push	{r3, r4, r5, lr}
 8002c4e:	4d06      	ldr	r5, [pc, #24]	; (8002c68 <_sbrk_r+0x1c>)
 8002c50:	2300      	movs	r3, #0
 8002c52:	4604      	mov	r4, r0
 8002c54:	4608      	mov	r0, r1
 8002c56:	602b      	str	r3, [r5, #0]
 8002c58:	f7fd fdec 	bl	8000834 <_sbrk>
 8002c5c:	1c43      	adds	r3, r0, #1
 8002c5e:	d102      	bne.n	8002c66 <_sbrk_r+0x1a>
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	b103      	cbz	r3, 8002c66 <_sbrk_r+0x1a>
 8002c64:	6023      	str	r3, [r4, #0]
 8002c66:	bd38      	pop	{r3, r4, r5, pc}
 8002c68:	200000f8 	.word	0x200000f8

08002c6c <__sread>:
 8002c6c:	b510      	push	{r4, lr}
 8002c6e:	460c      	mov	r4, r1
 8002c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c74:	f000 fab4 	bl	80031e0 <_read_r>
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	bfab      	itete	ge
 8002c7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8002c80:	181b      	addge	r3, r3, r0
 8002c82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c86:	bfac      	ite	ge
 8002c88:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c8a:	81a3      	strhlt	r3, [r4, #12]
 8002c8c:	bd10      	pop	{r4, pc}

08002c8e <__swrite>:
 8002c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c92:	461f      	mov	r7, r3
 8002c94:	898b      	ldrh	r3, [r1, #12]
 8002c96:	05db      	lsls	r3, r3, #23
 8002c98:	4605      	mov	r5, r0
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	4616      	mov	r6, r2
 8002c9e:	d505      	bpl.n	8002cac <__swrite+0x1e>
 8002ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f000 f9c8 	bl	800303c <_lseek_r>
 8002cac:	89a3      	ldrh	r3, [r4, #12]
 8002cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cb6:	81a3      	strh	r3, [r4, #12]
 8002cb8:	4632      	mov	r2, r6
 8002cba:	463b      	mov	r3, r7
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cc2:	f000 b869 	b.w	8002d98 <_write_r>

08002cc6 <__sseek>:
 8002cc6:	b510      	push	{r4, lr}
 8002cc8:	460c      	mov	r4, r1
 8002cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cce:	f000 f9b5 	bl	800303c <_lseek_r>
 8002cd2:	1c43      	adds	r3, r0, #1
 8002cd4:	89a3      	ldrh	r3, [r4, #12]
 8002cd6:	bf15      	itete	ne
 8002cd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002cda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002cde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ce2:	81a3      	strheq	r3, [r4, #12]
 8002ce4:	bf18      	it	ne
 8002ce6:	81a3      	strhne	r3, [r4, #12]
 8002ce8:	bd10      	pop	{r4, pc}

08002cea <__sclose>:
 8002cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cee:	f000 b8d3 	b.w	8002e98 <_close_r>
	...

08002cf4 <__swbuf_r>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	460e      	mov	r6, r1
 8002cf8:	4614      	mov	r4, r2
 8002cfa:	4605      	mov	r5, r0
 8002cfc:	b118      	cbz	r0, 8002d06 <__swbuf_r+0x12>
 8002cfe:	6983      	ldr	r3, [r0, #24]
 8002d00:	b90b      	cbnz	r3, 8002d06 <__swbuf_r+0x12>
 8002d02:	f7ff fbbb 	bl	800247c <__sinit>
 8002d06:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <__swbuf_r+0x98>)
 8002d08:	429c      	cmp	r4, r3
 8002d0a:	d12b      	bne.n	8002d64 <__swbuf_r+0x70>
 8002d0c:	686c      	ldr	r4, [r5, #4]
 8002d0e:	69a3      	ldr	r3, [r4, #24]
 8002d10:	60a3      	str	r3, [r4, #8]
 8002d12:	89a3      	ldrh	r3, [r4, #12]
 8002d14:	071a      	lsls	r2, r3, #28
 8002d16:	d52f      	bpl.n	8002d78 <__swbuf_r+0x84>
 8002d18:	6923      	ldr	r3, [r4, #16]
 8002d1a:	b36b      	cbz	r3, 8002d78 <__swbuf_r+0x84>
 8002d1c:	6923      	ldr	r3, [r4, #16]
 8002d1e:	6820      	ldr	r0, [r4, #0]
 8002d20:	1ac0      	subs	r0, r0, r3
 8002d22:	6963      	ldr	r3, [r4, #20]
 8002d24:	b2f6      	uxtb	r6, r6
 8002d26:	4283      	cmp	r3, r0
 8002d28:	4637      	mov	r7, r6
 8002d2a:	dc04      	bgt.n	8002d36 <__swbuf_r+0x42>
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f000 f948 	bl	8002fc4 <_fflush_r>
 8002d34:	bb30      	cbnz	r0, 8002d84 <__swbuf_r+0x90>
 8002d36:	68a3      	ldr	r3, [r4, #8]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	60a3      	str	r3, [r4, #8]
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	6022      	str	r2, [r4, #0]
 8002d42:	701e      	strb	r6, [r3, #0]
 8002d44:	6963      	ldr	r3, [r4, #20]
 8002d46:	3001      	adds	r0, #1
 8002d48:	4283      	cmp	r3, r0
 8002d4a:	d004      	beq.n	8002d56 <__swbuf_r+0x62>
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	07db      	lsls	r3, r3, #31
 8002d50:	d506      	bpl.n	8002d60 <__swbuf_r+0x6c>
 8002d52:	2e0a      	cmp	r6, #10
 8002d54:	d104      	bne.n	8002d60 <__swbuf_r+0x6c>
 8002d56:	4621      	mov	r1, r4
 8002d58:	4628      	mov	r0, r5
 8002d5a:	f000 f933 	bl	8002fc4 <_fflush_r>
 8002d5e:	b988      	cbnz	r0, 8002d84 <__swbuf_r+0x90>
 8002d60:	4638      	mov	r0, r7
 8002d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d64:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <__swbuf_r+0x9c>)
 8002d66:	429c      	cmp	r4, r3
 8002d68:	d101      	bne.n	8002d6e <__swbuf_r+0x7a>
 8002d6a:	68ac      	ldr	r4, [r5, #8]
 8002d6c:	e7cf      	b.n	8002d0e <__swbuf_r+0x1a>
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <__swbuf_r+0xa0>)
 8002d70:	429c      	cmp	r4, r3
 8002d72:	bf08      	it	eq
 8002d74:	68ec      	ldreq	r4, [r5, #12]
 8002d76:	e7ca      	b.n	8002d0e <__swbuf_r+0x1a>
 8002d78:	4621      	mov	r1, r4
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f000 f81e 	bl	8002dbc <__swsetup_r>
 8002d80:	2800      	cmp	r0, #0
 8002d82:	d0cb      	beq.n	8002d1c <__swbuf_r+0x28>
 8002d84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002d88:	e7ea      	b.n	8002d60 <__swbuf_r+0x6c>
 8002d8a:	bf00      	nop
 8002d8c:	08003324 	.word	0x08003324
 8002d90:	08003344 	.word	0x08003344
 8002d94:	08003304 	.word	0x08003304

08002d98 <_write_r>:
 8002d98:	b538      	push	{r3, r4, r5, lr}
 8002d9a:	4d07      	ldr	r5, [pc, #28]	; (8002db8 <_write_r+0x20>)
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	4608      	mov	r0, r1
 8002da0:	4611      	mov	r1, r2
 8002da2:	2200      	movs	r2, #0
 8002da4:	602a      	str	r2, [r5, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f7fd fcf3 	bl	8000792 <_write>
 8002dac:	1c43      	adds	r3, r0, #1
 8002dae:	d102      	bne.n	8002db6 <_write_r+0x1e>
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	b103      	cbz	r3, 8002db6 <_write_r+0x1e>
 8002db4:	6023      	str	r3, [r4, #0]
 8002db6:	bd38      	pop	{r3, r4, r5, pc}
 8002db8:	200000f8 	.word	0x200000f8

08002dbc <__swsetup_r>:
 8002dbc:	4b32      	ldr	r3, [pc, #200]	; (8002e88 <__swsetup_r+0xcc>)
 8002dbe:	b570      	push	{r4, r5, r6, lr}
 8002dc0:	681d      	ldr	r5, [r3, #0]
 8002dc2:	4606      	mov	r6, r0
 8002dc4:	460c      	mov	r4, r1
 8002dc6:	b125      	cbz	r5, 8002dd2 <__swsetup_r+0x16>
 8002dc8:	69ab      	ldr	r3, [r5, #24]
 8002dca:	b913      	cbnz	r3, 8002dd2 <__swsetup_r+0x16>
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f7ff fb55 	bl	800247c <__sinit>
 8002dd2:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <__swsetup_r+0xd0>)
 8002dd4:	429c      	cmp	r4, r3
 8002dd6:	d10f      	bne.n	8002df8 <__swsetup_r+0x3c>
 8002dd8:	686c      	ldr	r4, [r5, #4]
 8002dda:	89a3      	ldrh	r3, [r4, #12]
 8002ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002de0:	0719      	lsls	r1, r3, #28
 8002de2:	d42c      	bmi.n	8002e3e <__swsetup_r+0x82>
 8002de4:	06dd      	lsls	r5, r3, #27
 8002de6:	d411      	bmi.n	8002e0c <__swsetup_r+0x50>
 8002de8:	2309      	movs	r3, #9
 8002dea:	6033      	str	r3, [r6, #0]
 8002dec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002df0:	81a3      	strh	r3, [r4, #12]
 8002df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002df6:	e03e      	b.n	8002e76 <__swsetup_r+0xba>
 8002df8:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <__swsetup_r+0xd4>)
 8002dfa:	429c      	cmp	r4, r3
 8002dfc:	d101      	bne.n	8002e02 <__swsetup_r+0x46>
 8002dfe:	68ac      	ldr	r4, [r5, #8]
 8002e00:	e7eb      	b.n	8002dda <__swsetup_r+0x1e>
 8002e02:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <__swsetup_r+0xd8>)
 8002e04:	429c      	cmp	r4, r3
 8002e06:	bf08      	it	eq
 8002e08:	68ec      	ldreq	r4, [r5, #12]
 8002e0a:	e7e6      	b.n	8002dda <__swsetup_r+0x1e>
 8002e0c:	0758      	lsls	r0, r3, #29
 8002e0e:	d512      	bpl.n	8002e36 <__swsetup_r+0x7a>
 8002e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e12:	b141      	cbz	r1, 8002e26 <__swsetup_r+0x6a>
 8002e14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e18:	4299      	cmp	r1, r3
 8002e1a:	d002      	beq.n	8002e22 <__swsetup_r+0x66>
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	f000 f98f 	bl	8003140 <_free_r>
 8002e22:	2300      	movs	r3, #0
 8002e24:	6363      	str	r3, [r4, #52]	; 0x34
 8002e26:	89a3      	ldrh	r3, [r4, #12]
 8002e28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e2c:	81a3      	strh	r3, [r4, #12]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	6063      	str	r3, [r4, #4]
 8002e32:	6923      	ldr	r3, [r4, #16]
 8002e34:	6023      	str	r3, [r4, #0]
 8002e36:	89a3      	ldrh	r3, [r4, #12]
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	81a3      	strh	r3, [r4, #12]
 8002e3e:	6923      	ldr	r3, [r4, #16]
 8002e40:	b94b      	cbnz	r3, 8002e56 <__swsetup_r+0x9a>
 8002e42:	89a3      	ldrh	r3, [r4, #12]
 8002e44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4c:	d003      	beq.n	8002e56 <__swsetup_r+0x9a>
 8002e4e:	4621      	mov	r1, r4
 8002e50:	4630      	mov	r0, r6
 8002e52:	f000 f929 	bl	80030a8 <__smakebuf_r>
 8002e56:	89a0      	ldrh	r0, [r4, #12]
 8002e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e5c:	f010 0301 	ands.w	r3, r0, #1
 8002e60:	d00a      	beq.n	8002e78 <__swsetup_r+0xbc>
 8002e62:	2300      	movs	r3, #0
 8002e64:	60a3      	str	r3, [r4, #8]
 8002e66:	6963      	ldr	r3, [r4, #20]
 8002e68:	425b      	negs	r3, r3
 8002e6a:	61a3      	str	r3, [r4, #24]
 8002e6c:	6923      	ldr	r3, [r4, #16]
 8002e6e:	b943      	cbnz	r3, 8002e82 <__swsetup_r+0xc6>
 8002e70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e74:	d1ba      	bne.n	8002dec <__swsetup_r+0x30>
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	0781      	lsls	r1, r0, #30
 8002e7a:	bf58      	it	pl
 8002e7c:	6963      	ldrpl	r3, [r4, #20]
 8002e7e:	60a3      	str	r3, [r4, #8]
 8002e80:	e7f4      	b.n	8002e6c <__swsetup_r+0xb0>
 8002e82:	2000      	movs	r0, #0
 8002e84:	e7f7      	b.n	8002e76 <__swsetup_r+0xba>
 8002e86:	bf00      	nop
 8002e88:	20000018 	.word	0x20000018
 8002e8c:	08003324 	.word	0x08003324
 8002e90:	08003344 	.word	0x08003344
 8002e94:	08003304 	.word	0x08003304

08002e98 <_close_r>:
 8002e98:	b538      	push	{r3, r4, r5, lr}
 8002e9a:	4d06      	ldr	r5, [pc, #24]	; (8002eb4 <_close_r+0x1c>)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	602b      	str	r3, [r5, #0]
 8002ea4:	f7fd fc91 	bl	80007ca <_close>
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	d102      	bne.n	8002eb2 <_close_r+0x1a>
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	b103      	cbz	r3, 8002eb2 <_close_r+0x1a>
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
 8002eb4:	200000f8 	.word	0x200000f8

08002eb8 <__sflush_r>:
 8002eb8:	898a      	ldrh	r2, [r1, #12]
 8002eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ebe:	4605      	mov	r5, r0
 8002ec0:	0710      	lsls	r0, r2, #28
 8002ec2:	460c      	mov	r4, r1
 8002ec4:	d458      	bmi.n	8002f78 <__sflush_r+0xc0>
 8002ec6:	684b      	ldr	r3, [r1, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	dc05      	bgt.n	8002ed8 <__sflush_r+0x20>
 8002ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dc02      	bgt.n	8002ed8 <__sflush_r+0x20>
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002eda:	2e00      	cmp	r6, #0
 8002edc:	d0f9      	beq.n	8002ed2 <__sflush_r+0x1a>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ee4:	682f      	ldr	r7, [r5, #0]
 8002ee6:	602b      	str	r3, [r5, #0]
 8002ee8:	d032      	beq.n	8002f50 <__sflush_r+0x98>
 8002eea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	075a      	lsls	r2, r3, #29
 8002ef0:	d505      	bpl.n	8002efe <__sflush_r+0x46>
 8002ef2:	6863      	ldr	r3, [r4, #4]
 8002ef4:	1ac0      	subs	r0, r0, r3
 8002ef6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ef8:	b10b      	cbz	r3, 8002efe <__sflush_r+0x46>
 8002efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002efc:	1ac0      	subs	r0, r0, r3
 8002efe:	2300      	movs	r3, #0
 8002f00:	4602      	mov	r2, r0
 8002f02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f04:	6a21      	ldr	r1, [r4, #32]
 8002f06:	4628      	mov	r0, r5
 8002f08:	47b0      	blx	r6
 8002f0a:	1c43      	adds	r3, r0, #1
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	d106      	bne.n	8002f1e <__sflush_r+0x66>
 8002f10:	6829      	ldr	r1, [r5, #0]
 8002f12:	291d      	cmp	r1, #29
 8002f14:	d82c      	bhi.n	8002f70 <__sflush_r+0xb8>
 8002f16:	4a2a      	ldr	r2, [pc, #168]	; (8002fc0 <__sflush_r+0x108>)
 8002f18:	40ca      	lsrs	r2, r1
 8002f1a:	07d6      	lsls	r6, r2, #31
 8002f1c:	d528      	bpl.n	8002f70 <__sflush_r+0xb8>
 8002f1e:	2200      	movs	r2, #0
 8002f20:	6062      	str	r2, [r4, #4]
 8002f22:	04d9      	lsls	r1, r3, #19
 8002f24:	6922      	ldr	r2, [r4, #16]
 8002f26:	6022      	str	r2, [r4, #0]
 8002f28:	d504      	bpl.n	8002f34 <__sflush_r+0x7c>
 8002f2a:	1c42      	adds	r2, r0, #1
 8002f2c:	d101      	bne.n	8002f32 <__sflush_r+0x7a>
 8002f2e:	682b      	ldr	r3, [r5, #0]
 8002f30:	b903      	cbnz	r3, 8002f34 <__sflush_r+0x7c>
 8002f32:	6560      	str	r0, [r4, #84]	; 0x54
 8002f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f36:	602f      	str	r7, [r5, #0]
 8002f38:	2900      	cmp	r1, #0
 8002f3a:	d0ca      	beq.n	8002ed2 <__sflush_r+0x1a>
 8002f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f40:	4299      	cmp	r1, r3
 8002f42:	d002      	beq.n	8002f4a <__sflush_r+0x92>
 8002f44:	4628      	mov	r0, r5
 8002f46:	f000 f8fb 	bl	8003140 <_free_r>
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	6360      	str	r0, [r4, #52]	; 0x34
 8002f4e:	e7c1      	b.n	8002ed4 <__sflush_r+0x1c>
 8002f50:	6a21      	ldr	r1, [r4, #32]
 8002f52:	2301      	movs	r3, #1
 8002f54:	4628      	mov	r0, r5
 8002f56:	47b0      	blx	r6
 8002f58:	1c41      	adds	r1, r0, #1
 8002f5a:	d1c7      	bne.n	8002eec <__sflush_r+0x34>
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0c4      	beq.n	8002eec <__sflush_r+0x34>
 8002f62:	2b1d      	cmp	r3, #29
 8002f64:	d001      	beq.n	8002f6a <__sflush_r+0xb2>
 8002f66:	2b16      	cmp	r3, #22
 8002f68:	d101      	bne.n	8002f6e <__sflush_r+0xb6>
 8002f6a:	602f      	str	r7, [r5, #0]
 8002f6c:	e7b1      	b.n	8002ed2 <__sflush_r+0x1a>
 8002f6e:	89a3      	ldrh	r3, [r4, #12]
 8002f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f74:	81a3      	strh	r3, [r4, #12]
 8002f76:	e7ad      	b.n	8002ed4 <__sflush_r+0x1c>
 8002f78:	690f      	ldr	r7, [r1, #16]
 8002f7a:	2f00      	cmp	r7, #0
 8002f7c:	d0a9      	beq.n	8002ed2 <__sflush_r+0x1a>
 8002f7e:	0793      	lsls	r3, r2, #30
 8002f80:	680e      	ldr	r6, [r1, #0]
 8002f82:	bf08      	it	eq
 8002f84:	694b      	ldreq	r3, [r1, #20]
 8002f86:	600f      	str	r7, [r1, #0]
 8002f88:	bf18      	it	ne
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	eba6 0807 	sub.w	r8, r6, r7
 8002f90:	608b      	str	r3, [r1, #8]
 8002f92:	f1b8 0f00 	cmp.w	r8, #0
 8002f96:	dd9c      	ble.n	8002ed2 <__sflush_r+0x1a>
 8002f98:	6a21      	ldr	r1, [r4, #32]
 8002f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f9c:	4643      	mov	r3, r8
 8002f9e:	463a      	mov	r2, r7
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	47b0      	blx	r6
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	dc06      	bgt.n	8002fb6 <__sflush_r+0xfe>
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fae:	81a3      	strh	r3, [r4, #12]
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fb4:	e78e      	b.n	8002ed4 <__sflush_r+0x1c>
 8002fb6:	4407      	add	r7, r0
 8002fb8:	eba8 0800 	sub.w	r8, r8, r0
 8002fbc:	e7e9      	b.n	8002f92 <__sflush_r+0xda>
 8002fbe:	bf00      	nop
 8002fc0:	20400001 	.word	0x20400001

08002fc4 <_fflush_r>:
 8002fc4:	b538      	push	{r3, r4, r5, lr}
 8002fc6:	690b      	ldr	r3, [r1, #16]
 8002fc8:	4605      	mov	r5, r0
 8002fca:	460c      	mov	r4, r1
 8002fcc:	b913      	cbnz	r3, 8002fd4 <_fflush_r+0x10>
 8002fce:	2500      	movs	r5, #0
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	bd38      	pop	{r3, r4, r5, pc}
 8002fd4:	b118      	cbz	r0, 8002fde <_fflush_r+0x1a>
 8002fd6:	6983      	ldr	r3, [r0, #24]
 8002fd8:	b90b      	cbnz	r3, 8002fde <_fflush_r+0x1a>
 8002fda:	f7ff fa4f 	bl	800247c <__sinit>
 8002fde:	4b14      	ldr	r3, [pc, #80]	; (8003030 <_fflush_r+0x6c>)
 8002fe0:	429c      	cmp	r4, r3
 8002fe2:	d11b      	bne.n	800301c <_fflush_r+0x58>
 8002fe4:	686c      	ldr	r4, [r5, #4]
 8002fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ef      	beq.n	8002fce <_fflush_r+0xa>
 8002fee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ff0:	07d0      	lsls	r0, r2, #31
 8002ff2:	d404      	bmi.n	8002ffe <_fflush_r+0x3a>
 8002ff4:	0599      	lsls	r1, r3, #22
 8002ff6:	d402      	bmi.n	8002ffe <_fflush_r+0x3a>
 8002ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ffa:	f7ff fadd 	bl	80025b8 <__retarget_lock_acquire_recursive>
 8002ffe:	4628      	mov	r0, r5
 8003000:	4621      	mov	r1, r4
 8003002:	f7ff ff59 	bl	8002eb8 <__sflush_r>
 8003006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003008:	07da      	lsls	r2, r3, #31
 800300a:	4605      	mov	r5, r0
 800300c:	d4e0      	bmi.n	8002fd0 <_fflush_r+0xc>
 800300e:	89a3      	ldrh	r3, [r4, #12]
 8003010:	059b      	lsls	r3, r3, #22
 8003012:	d4dd      	bmi.n	8002fd0 <_fflush_r+0xc>
 8003014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003016:	f7ff fad0 	bl	80025ba <__retarget_lock_release_recursive>
 800301a:	e7d9      	b.n	8002fd0 <_fflush_r+0xc>
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <_fflush_r+0x70>)
 800301e:	429c      	cmp	r4, r3
 8003020:	d101      	bne.n	8003026 <_fflush_r+0x62>
 8003022:	68ac      	ldr	r4, [r5, #8]
 8003024:	e7df      	b.n	8002fe6 <_fflush_r+0x22>
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <_fflush_r+0x74>)
 8003028:	429c      	cmp	r4, r3
 800302a:	bf08      	it	eq
 800302c:	68ec      	ldreq	r4, [r5, #12]
 800302e:	e7da      	b.n	8002fe6 <_fflush_r+0x22>
 8003030:	08003324 	.word	0x08003324
 8003034:	08003344 	.word	0x08003344
 8003038:	08003304 	.word	0x08003304

0800303c <_lseek_r>:
 800303c:	b538      	push	{r3, r4, r5, lr}
 800303e:	4d07      	ldr	r5, [pc, #28]	; (800305c <_lseek_r+0x20>)
 8003040:	4604      	mov	r4, r0
 8003042:	4608      	mov	r0, r1
 8003044:	4611      	mov	r1, r2
 8003046:	2200      	movs	r2, #0
 8003048:	602a      	str	r2, [r5, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	f7fd fbe4 	bl	8000818 <_lseek>
 8003050:	1c43      	adds	r3, r0, #1
 8003052:	d102      	bne.n	800305a <_lseek_r+0x1e>
 8003054:	682b      	ldr	r3, [r5, #0]
 8003056:	b103      	cbz	r3, 800305a <_lseek_r+0x1e>
 8003058:	6023      	str	r3, [r4, #0]
 800305a:	bd38      	pop	{r3, r4, r5, pc}
 800305c:	200000f8 	.word	0x200000f8

08003060 <__swhatbuf_r>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	460e      	mov	r6, r1
 8003064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003068:	2900      	cmp	r1, #0
 800306a:	b096      	sub	sp, #88	; 0x58
 800306c:	4614      	mov	r4, r2
 800306e:	461d      	mov	r5, r3
 8003070:	da07      	bge.n	8003082 <__swhatbuf_r+0x22>
 8003072:	2300      	movs	r3, #0
 8003074:	602b      	str	r3, [r5, #0]
 8003076:	89b3      	ldrh	r3, [r6, #12]
 8003078:	061a      	lsls	r2, r3, #24
 800307a:	d410      	bmi.n	800309e <__swhatbuf_r+0x3e>
 800307c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003080:	e00e      	b.n	80030a0 <__swhatbuf_r+0x40>
 8003082:	466a      	mov	r2, sp
 8003084:	f000 f8be 	bl	8003204 <_fstat_r>
 8003088:	2800      	cmp	r0, #0
 800308a:	dbf2      	blt.n	8003072 <__swhatbuf_r+0x12>
 800308c:	9a01      	ldr	r2, [sp, #4]
 800308e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003092:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003096:	425a      	negs	r2, r3
 8003098:	415a      	adcs	r2, r3
 800309a:	602a      	str	r2, [r5, #0]
 800309c:	e7ee      	b.n	800307c <__swhatbuf_r+0x1c>
 800309e:	2340      	movs	r3, #64	; 0x40
 80030a0:	2000      	movs	r0, #0
 80030a2:	6023      	str	r3, [r4, #0]
 80030a4:	b016      	add	sp, #88	; 0x58
 80030a6:	bd70      	pop	{r4, r5, r6, pc}

080030a8 <__smakebuf_r>:
 80030a8:	898b      	ldrh	r3, [r1, #12]
 80030aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030ac:	079d      	lsls	r5, r3, #30
 80030ae:	4606      	mov	r6, r0
 80030b0:	460c      	mov	r4, r1
 80030b2:	d507      	bpl.n	80030c4 <__smakebuf_r+0x1c>
 80030b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030b8:	6023      	str	r3, [r4, #0]
 80030ba:	6123      	str	r3, [r4, #16]
 80030bc:	2301      	movs	r3, #1
 80030be:	6163      	str	r3, [r4, #20]
 80030c0:	b002      	add	sp, #8
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	ab01      	add	r3, sp, #4
 80030c6:	466a      	mov	r2, sp
 80030c8:	f7ff ffca 	bl	8003060 <__swhatbuf_r>
 80030cc:	9900      	ldr	r1, [sp, #0]
 80030ce:	4605      	mov	r5, r0
 80030d0:	4630      	mov	r0, r6
 80030d2:	f7ff fa73 	bl	80025bc <_malloc_r>
 80030d6:	b948      	cbnz	r0, 80030ec <__smakebuf_r+0x44>
 80030d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030dc:	059a      	lsls	r2, r3, #22
 80030de:	d4ef      	bmi.n	80030c0 <__smakebuf_r+0x18>
 80030e0:	f023 0303 	bic.w	r3, r3, #3
 80030e4:	f043 0302 	orr.w	r3, r3, #2
 80030e8:	81a3      	strh	r3, [r4, #12]
 80030ea:	e7e3      	b.n	80030b4 <__smakebuf_r+0xc>
 80030ec:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <__smakebuf_r+0x7c>)
 80030ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80030f0:	89a3      	ldrh	r3, [r4, #12]
 80030f2:	6020      	str	r0, [r4, #0]
 80030f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f8:	81a3      	strh	r3, [r4, #12]
 80030fa:	9b00      	ldr	r3, [sp, #0]
 80030fc:	6163      	str	r3, [r4, #20]
 80030fe:	9b01      	ldr	r3, [sp, #4]
 8003100:	6120      	str	r0, [r4, #16]
 8003102:	b15b      	cbz	r3, 800311c <__smakebuf_r+0x74>
 8003104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003108:	4630      	mov	r0, r6
 800310a:	f000 f88d 	bl	8003228 <_isatty_r>
 800310e:	b128      	cbz	r0, 800311c <__smakebuf_r+0x74>
 8003110:	89a3      	ldrh	r3, [r4, #12]
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	81a3      	strh	r3, [r4, #12]
 800311c:	89a0      	ldrh	r0, [r4, #12]
 800311e:	4305      	orrs	r5, r0
 8003120:	81a5      	strh	r5, [r4, #12]
 8003122:	e7cd      	b.n	80030c0 <__smakebuf_r+0x18>
 8003124:	08002415 	.word	0x08002415

08003128 <__malloc_lock>:
 8003128:	4801      	ldr	r0, [pc, #4]	; (8003130 <__malloc_lock+0x8>)
 800312a:	f7ff ba45 	b.w	80025b8 <__retarget_lock_acquire_recursive>
 800312e:	bf00      	nop
 8003130:	200000f0 	.word	0x200000f0

08003134 <__malloc_unlock>:
 8003134:	4801      	ldr	r0, [pc, #4]	; (800313c <__malloc_unlock+0x8>)
 8003136:	f7ff ba40 	b.w	80025ba <__retarget_lock_release_recursive>
 800313a:	bf00      	nop
 800313c:	200000f0 	.word	0x200000f0

08003140 <_free_r>:
 8003140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003142:	2900      	cmp	r1, #0
 8003144:	d048      	beq.n	80031d8 <_free_r+0x98>
 8003146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800314a:	9001      	str	r0, [sp, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	f1a1 0404 	sub.w	r4, r1, #4
 8003152:	bfb8      	it	lt
 8003154:	18e4      	addlt	r4, r4, r3
 8003156:	f7ff ffe7 	bl	8003128 <__malloc_lock>
 800315a:	4a20      	ldr	r2, [pc, #128]	; (80031dc <_free_r+0x9c>)
 800315c:	9801      	ldr	r0, [sp, #4]
 800315e:	6813      	ldr	r3, [r2, #0]
 8003160:	4615      	mov	r5, r2
 8003162:	b933      	cbnz	r3, 8003172 <_free_r+0x32>
 8003164:	6063      	str	r3, [r4, #4]
 8003166:	6014      	str	r4, [r2, #0]
 8003168:	b003      	add	sp, #12
 800316a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800316e:	f7ff bfe1 	b.w	8003134 <__malloc_unlock>
 8003172:	42a3      	cmp	r3, r4
 8003174:	d90b      	bls.n	800318e <_free_r+0x4e>
 8003176:	6821      	ldr	r1, [r4, #0]
 8003178:	1862      	adds	r2, r4, r1
 800317a:	4293      	cmp	r3, r2
 800317c:	bf04      	itt	eq
 800317e:	681a      	ldreq	r2, [r3, #0]
 8003180:	685b      	ldreq	r3, [r3, #4]
 8003182:	6063      	str	r3, [r4, #4]
 8003184:	bf04      	itt	eq
 8003186:	1852      	addeq	r2, r2, r1
 8003188:	6022      	streq	r2, [r4, #0]
 800318a:	602c      	str	r4, [r5, #0]
 800318c:	e7ec      	b.n	8003168 <_free_r+0x28>
 800318e:	461a      	mov	r2, r3
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	b10b      	cbz	r3, 8003198 <_free_r+0x58>
 8003194:	42a3      	cmp	r3, r4
 8003196:	d9fa      	bls.n	800318e <_free_r+0x4e>
 8003198:	6811      	ldr	r1, [r2, #0]
 800319a:	1855      	adds	r5, r2, r1
 800319c:	42a5      	cmp	r5, r4
 800319e:	d10b      	bne.n	80031b8 <_free_r+0x78>
 80031a0:	6824      	ldr	r4, [r4, #0]
 80031a2:	4421      	add	r1, r4
 80031a4:	1854      	adds	r4, r2, r1
 80031a6:	42a3      	cmp	r3, r4
 80031a8:	6011      	str	r1, [r2, #0]
 80031aa:	d1dd      	bne.n	8003168 <_free_r+0x28>
 80031ac:	681c      	ldr	r4, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	6053      	str	r3, [r2, #4]
 80031b2:	4421      	add	r1, r4
 80031b4:	6011      	str	r1, [r2, #0]
 80031b6:	e7d7      	b.n	8003168 <_free_r+0x28>
 80031b8:	d902      	bls.n	80031c0 <_free_r+0x80>
 80031ba:	230c      	movs	r3, #12
 80031bc:	6003      	str	r3, [r0, #0]
 80031be:	e7d3      	b.n	8003168 <_free_r+0x28>
 80031c0:	6825      	ldr	r5, [r4, #0]
 80031c2:	1961      	adds	r1, r4, r5
 80031c4:	428b      	cmp	r3, r1
 80031c6:	bf04      	itt	eq
 80031c8:	6819      	ldreq	r1, [r3, #0]
 80031ca:	685b      	ldreq	r3, [r3, #4]
 80031cc:	6063      	str	r3, [r4, #4]
 80031ce:	bf04      	itt	eq
 80031d0:	1949      	addeq	r1, r1, r5
 80031d2:	6021      	streq	r1, [r4, #0]
 80031d4:	6054      	str	r4, [r2, #4]
 80031d6:	e7c7      	b.n	8003168 <_free_r+0x28>
 80031d8:	b003      	add	sp, #12
 80031da:	bd30      	pop	{r4, r5, pc}
 80031dc:	2000009c 	.word	0x2000009c

080031e0 <_read_r>:
 80031e0:	b538      	push	{r3, r4, r5, lr}
 80031e2:	4d07      	ldr	r5, [pc, #28]	; (8003200 <_read_r+0x20>)
 80031e4:	4604      	mov	r4, r0
 80031e6:	4608      	mov	r0, r1
 80031e8:	4611      	mov	r1, r2
 80031ea:	2200      	movs	r2, #0
 80031ec:	602a      	str	r2, [r5, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	f7fd fab2 	bl	8000758 <_read>
 80031f4:	1c43      	adds	r3, r0, #1
 80031f6:	d102      	bne.n	80031fe <_read_r+0x1e>
 80031f8:	682b      	ldr	r3, [r5, #0]
 80031fa:	b103      	cbz	r3, 80031fe <_read_r+0x1e>
 80031fc:	6023      	str	r3, [r4, #0]
 80031fe:	bd38      	pop	{r3, r4, r5, pc}
 8003200:	200000f8 	.word	0x200000f8

08003204 <_fstat_r>:
 8003204:	b538      	push	{r3, r4, r5, lr}
 8003206:	4d07      	ldr	r5, [pc, #28]	; (8003224 <_fstat_r+0x20>)
 8003208:	2300      	movs	r3, #0
 800320a:	4604      	mov	r4, r0
 800320c:	4608      	mov	r0, r1
 800320e:	4611      	mov	r1, r2
 8003210:	602b      	str	r3, [r5, #0]
 8003212:	f7fd fae6 	bl	80007e2 <_fstat>
 8003216:	1c43      	adds	r3, r0, #1
 8003218:	d102      	bne.n	8003220 <_fstat_r+0x1c>
 800321a:	682b      	ldr	r3, [r5, #0]
 800321c:	b103      	cbz	r3, 8003220 <_fstat_r+0x1c>
 800321e:	6023      	str	r3, [r4, #0]
 8003220:	bd38      	pop	{r3, r4, r5, pc}
 8003222:	bf00      	nop
 8003224:	200000f8 	.word	0x200000f8

08003228 <_isatty_r>:
 8003228:	b538      	push	{r3, r4, r5, lr}
 800322a:	4d06      	ldr	r5, [pc, #24]	; (8003244 <_isatty_r+0x1c>)
 800322c:	2300      	movs	r3, #0
 800322e:	4604      	mov	r4, r0
 8003230:	4608      	mov	r0, r1
 8003232:	602b      	str	r3, [r5, #0]
 8003234:	f7fd fae5 	bl	8000802 <_isatty>
 8003238:	1c43      	adds	r3, r0, #1
 800323a:	d102      	bne.n	8003242 <_isatty_r+0x1a>
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	b103      	cbz	r3, 8003242 <_isatty_r+0x1a>
 8003240:	6023      	str	r3, [r4, #0]
 8003242:	bd38      	pop	{r3, r4, r5, pc}
 8003244:	200000f8 	.word	0x200000f8

08003248 <_init>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	bf00      	nop
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr

08003254 <_fini>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	bf00      	nop
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr
