
Practica4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002244  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080023f0  080023f0  000123f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024d8  080024d8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080024d8  080024d8  000124d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024e0  080024e0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e0  080024e0  000124e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024e4  080024e4  000124e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080024e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000098  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c633  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e3a  00000000  00000000  0002c67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000780  00000000  00000000  0002e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006b8  00000000  00000000  0002ec40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026055  00000000  00000000  0002f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c471  00000000  00000000  0005534d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1e9f  00000000  00000000  000617be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014365d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001be8  00000000  00000000  001436b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080023d8 	.word	0x080023d8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	080023d8 	.word	0x080023d8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <debounceInit>:
 * Se carga el valor inicial del estado del boton comenzando con el boton sin presionar,
 * Se inicializa el delay con 40ms a traves de la macro DELAY_DEBOUNCING",
 */

bool_t debounceInit(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	currentStatus = BUTTON_UP;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <debounceInit+0x20>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
	delayInit(&delayDebouncing,DELAY_DEBOUNCING);
 80004ee:	2128      	movs	r1, #40	; 0x28
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <debounceInit+0x24>)
 80004f2:	f000 f871 	bl	80005d8 <delayInit>

	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80004f6:	2100      	movs	r1, #0
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 f9a9 	bl	8000850 <BSP_PB_Init>

	/* Initialize BSP Led for LED1, LED2 */
	//BSP_LED_Init(LED1);
	//BSP_LED_Init(LED2);

	return true;
 80004fe:	2301      	movs	r3, #1
}
 8000500:	4618      	mov	r0, r3
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000044 	.word	0x20000044
 8000508:	20000038 	.word	0x20000038

0800050c <debounceUpdate>:


uint8_t debounceUpdate(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	switch (currentStatus){
 8000510:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <debounceUpdate+0xc4>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d850      	bhi.n	80005ba <debounceUpdate+0xae>
 8000518:	a201      	add	r2, pc, #4	; (adr r2, 8000520 <debounceUpdate+0x14>)
 800051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051e:	bf00      	nop
 8000520:	08000531 	.word	0x08000531
 8000524:	0800054d 	.word	0x0800054d
 8000528:	08000577 	.word	0x08000577
 800052c:	08000591 	.word	0x08000591
		case BUTTON_UP:
		{
			if(BSP_PB_GetState(BUTTON_USER))
 8000530:	2000      	movs	r0, #0
 8000532:	f000 f9e3 	bl	80008fc <BSP_PB_GetState>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d005      	beq.n	8000548 <debounceUpdate+0x3c>
			{  delayRead(&delayDebouncing);
 800053c:	4825      	ldr	r0, [pc, #148]	; (80005d4 <debounceUpdate+0xc8>)
 800053e:	f000 f85f 	bl	8000600 <delayRead>
				currentStatus = BUTTON_FALLING;
 8000542:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <debounceUpdate+0xc4>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
			}
			return BUTTON_UP;
 8000548:	2300      	movs	r3, #0
 800054a:	e03f      	b.n	80005cc <debounceUpdate+0xc0>
			break;
		}
		case BUTTON_FALLING:
		{
			if(delayRead(&delayDebouncing))
 800054c:	4821      	ldr	r0, [pc, #132]	; (80005d4 <debounceUpdate+0xc8>)
 800054e:	f000 f857 	bl	8000600 <delayRead>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d033      	beq.n	80005c0 <debounceUpdate+0xb4>
			{
				if(BSP_PB_GetState(BUTTON_USER))
 8000558:	2000      	movs	r0, #0
 800055a:	f000 f9cf 	bl	80008fc <BSP_PB_GetState>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d004      	beq.n	800056e <debounceUpdate+0x62>
				{
					currentStatus = BUTTON_DOWN;
 8000564:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <debounceUpdate+0xc4>)
 8000566:	2202      	movs	r2, #2
 8000568:	701a      	strb	r2, [r3, #0]
					return BUTTON_PRESSED;
 800056a:	2301      	movs	r3, #1
 800056c:	e02e      	b.n	80005cc <debounceUpdate+0xc0>
				}else
				{
					currentStatus = BUTTON_UP;
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <debounceUpdate+0xc4>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8000574:	e024      	b.n	80005c0 <debounceUpdate+0xb4>
		}
		case BUTTON_DOWN:
		{
			if(!BSP_PB_GetState(BUTTON_USER))
 8000576:	2000      	movs	r0, #0
 8000578:	f000 f9c0 	bl	80008fc <BSP_PB_GetState>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d120      	bne.n	80005c4 <debounceUpdate+0xb8>
			{   delayRead(&delayDebouncing);
 8000582:	4814      	ldr	r0, [pc, #80]	; (80005d4 <debounceUpdate+0xc8>)
 8000584:	f000 f83c 	bl	8000600 <delayRead>
				currentStatus = BUTTON_RISING;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <debounceUpdate+0xc4>)
 800058a:	2203      	movs	r2, #3
 800058c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800058e:	e019      	b.n	80005c4 <debounceUpdate+0xb8>
		}
		case BUTTON_RISING:
		{
			if(delayRead(&delayDebouncing))
 8000590:	4810      	ldr	r0, [pc, #64]	; (80005d4 <debounceUpdate+0xc8>)
 8000592:	f000 f835 	bl	8000600 <delayRead>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d015      	beq.n	80005c8 <debounceUpdate+0xbc>
			{
				if(!BSP_PB_GetState(BUTTON_USER))
 800059c:	2000      	movs	r0, #0
 800059e:	f000 f9ad 	bl	80008fc <BSP_PB_GetState>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d104      	bne.n	80005b2 <debounceUpdate+0xa6>
				{
					currentStatus = BUTTON_UP;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <debounceUpdate+0xc4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
					return BUTTON_RELEASED;
 80005ae:	2302      	movs	r3, #2
 80005b0:	e00c      	b.n	80005cc <debounceUpdate+0xc0>
				}else
				{
					currentStatus = BUTTON_DOWN;
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <debounceUpdate+0xc4>)
 80005b4:	2202      	movs	r2, #2
 80005b6:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80005b8:	e006      	b.n	80005c8 <debounceUpdate+0xbc>
		}
		default:
			debounceInit();
 80005ba:	f7ff ff93 	bl	80004e4 <debounceInit>
			break;
 80005be:	e004      	b.n	80005ca <debounceUpdate+0xbe>
			break;
 80005c0:	bf00      	nop
 80005c2:	e002      	b.n	80005ca <debounceUpdate+0xbe>
			break;
 80005c4:	bf00      	nop
 80005c6:	e000      	b.n	80005ca <debounceUpdate+0xbe>
			break;
 80005c8:	bf00      	nop
	}
	return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000044 	.word	0x20000044
 80005d4:	20000038 	.word	0x20000038

080005d8 <delayInit>:
 * @param  None
 * @retval None
 */

void delayInit( delay_t * delay, tick_t duration )
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]

	if(delay != NULL )
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d005      	beq.n	80005f4 <delayInit+0x1c>
	{
		delay->duration = duration;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	605a      	str	r2, [r3, #4]
	    delay->running = false;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	721a      	strb	r2, [r3, #8]
	}
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <delayRead>:

bool_t delayRead( delay_t * delay )
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

	bool_t tiempo_cumplido = false;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
	if(delay != NULL )
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d01d      	beq.n	800064e <delayRead+0x4e>
	{
	     if(!delay->running)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	7a1b      	ldrb	r3, [r3, #8]
 8000616:	f083 0301 	eor.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d007      	beq.n	8000630 <delayRead+0x30>
	     {
		     delay->startTime = HAL_GetTick();
 8000620:	f000 fa46 	bl	8000ab0 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	601a      	str	r2, [r3, #0]
		     delay->running = 1;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2201      	movs	r2, #1
 800062e:	721a      	strb	r2, [r3, #8]
	      }
		 if (((tick_t)HAL_GetTick() - delay->startTime) >= delay->duration)
 8000630:	f000 fa3e 	bl	8000ab0 <HAL_GetTick>
 8000634:	4602      	mov	r2, r0
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	1ad2      	subs	r2, r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	d304      	bcc.n	800064e <delayRead+0x4e>
		 {
			 tiempo_cumplido = true;
 8000644:	2301      	movs	r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
		     delay->running= 0;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	721a      	strb	r2, [r3, #8]
		 }
	}
	return tiempo_cumplido;
 800064e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration )
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]

	if(delay != NULL )
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <delayWrite+0x16>
    {  //delay->startTime = HAL_GetTick();
	     delay->duration = duration;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	605a      	str	r2, [r3, #4]
    }
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <uartInit>:
 *  Created on: 24 nov. 2021
 *      Author: ezequiel
 */
#include "API_uart.h"

bool_t uartInit(){
 800067c:	b5b0      	push	{r4, r5, r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0

	bool_t EstadoUart;

	uint8_t miString[] = "BaudRate = 9600;\n\rStopBits = 1;\n\rParity=NONE \n\r";
 8000682:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <uartInit+0x84>)
 8000684:	1d3c      	adds	r4, r7, #4
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	  UartHandle.Instance        = USART3;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <uartInit+0x88>)
 800069a:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <uartInit+0x8c>)
 800069c:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = 9600;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <uartInit+0x88>)
 80006a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006a4:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <uartInit+0x88>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <uartInit+0x88>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <uartInit+0x88>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <uartInit+0x88>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <uartInit+0x88>)
 80006c0:	220c      	movs	r2, #12
 80006c2:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <uartInit+0x88>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]


	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <uartInit+0x88>)
 80006cc:	f001 f9d0 	bl	8001a70 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d003      	beq.n	80006de <uartInit+0x62>
	  {
		  EstadoUart = false;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80006dc:	e009      	b.n	80006f2 <uartInit+0x76>
	  }	else {
		  EstadoUart = true;
 80006de:	2301      	movs	r3, #1
 80006e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		  HAL_UART_Transmit(&UartHandle, (uint8_t *) miString, sizeof(miString)/sizeof(char), 1000);
 80006e4:	1d39      	adds	r1, r7, #4
 80006e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ea:	2230      	movs	r2, #48	; 0x30
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <uartInit+0x88>)
 80006ee:	f001 fa0c 	bl	8001b0a <HAL_UART_Transmit>
	  }

	  return EstadoUart;
 80006f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3738      	adds	r7, #56	; 0x38
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bdb0      	pop	{r4, r5, r7, pc}
 80006fe:	bf00      	nop
 8000700:	080023f0 	.word	0x080023f0
 8000704:	20000048 	.word	0x20000048
 8000708:	40004800 	.word	0x40004800

0800070c <uartSendString>:



void uartSendString(uint8_t *ptrstring){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

	uint8_t longitud=0;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]

	while(*(ptrstring+longitud) != 0) longitud++;
 8000718:	e002      	b.n	8000720 <uartSendString+0x14>
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	3301      	adds	r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1f6      	bne.n	800071a <uartSendString+0xe>

	HAL_UART_Transmit(&UartHandle, ptrstring, longitud, 1000);
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b29a      	uxth	r2, r3
 8000730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000734:	6879      	ldr	r1, [r7, #4]
 8000736:	4803      	ldr	r0, [pc, #12]	; (8000744 <uartSendString+0x38>)
 8000738:	f001 f9e7 	bl	8001b0a <HAL_UART_Transmit>

}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000048 	.word	0x20000048

08000748 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d10e      	bne.n	8000776 <BSP_LED_Init+0x2e>
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <BSP_LED_Init+0x94>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	4a1e      	ldr	r2, [pc, #120]	; (80007dc <BSP_LED_Init+0x94>)
 8000762:	f043 0302 	orr.w	r3, r3, #2
 8000766:	6313      	str	r3, [r2, #48]	; 0x30
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <BSP_LED_Init+0x94>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	e00d      	b.n	8000792 <BSP_LED_Init+0x4a>
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <BSP_LED_Init+0x94>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a17      	ldr	r2, [pc, #92]	; (80007dc <BSP_LED_Init+0x94>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <BSP_LED_Init+0x94>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <BSP_LED_Init+0x98>)
 8000796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <BSP_LED_Init+0x9c>)
 80007ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b0:	f107 0214 	add.w	r2, r7, #20
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fa98 	bl	8000cec <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <BSP_LED_Init+0x9c>)
 80007c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <BSP_LED_Init+0x98>)
 80007c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007cc:	2200      	movs	r2, #0
 80007ce:	4619      	mov	r1, r3
 80007d0:	f000 fc50 	bl	8001074 <HAL_GPIO_WritePin>
}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	; 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	080024b8 	.word	0x080024b8
 80007e4:	20000000 	.word	0x20000000

080007e8 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <BSP_LED_On+0x2c>)
 80007f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <BSP_LED_On+0x30>)
 80007fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000802:	2201      	movs	r2, #1
 8000804:	4619      	mov	r1, r3
 8000806:	f000 fc35 	bl	8001074 <HAL_GPIO_WritePin>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000000 	.word	0x20000000
 8000818:	080024b8 	.word	0x080024b8

0800081c <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4a07      	ldr	r2, [pc, #28]	; (8000848 <BSP_LED_Toggle+0x2c>)
 800082a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	4906      	ldr	r1, [pc, #24]	; (800084c <BSP_LED_Toggle+0x30>)
 8000832:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000836:	4619      	mov	r1, r3
 8000838:	4610      	mov	r0, r2
 800083a:	f000 fc34 	bl	80010a6 <HAL_GPIO_TogglePin>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000000 	.word	0x20000000
 800084c:	080024b8 	.word	0x080024b8

08000850 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	460a      	mov	r2, r1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <BSP_PB_Init+0xa4>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <BSP_PB_Init+0xa4>)
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	6313      	str	r3, [r2, #48]	; 0x30
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <BSP_PB_Init+0xa4>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d112      	bne.n	80008a8 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000886:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800088c:	2302      	movs	r3, #2
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000890:	2302      	movs	r3, #2
 8000892:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <BSP_PB_Init+0xa8>)
 8000898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089c:	f107 020c 	add.w	r2, r7, #12
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fa22 	bl	8000cec <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d11d      	bne.n	80008ea <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80008ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 80008b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008bc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <BSP_PB_Init+0xa8>)
 80008c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c6:	f107 020c 	add.w	r2, r7, #12
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fa0d 	bl	8000cec <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80008d2:	2328      	movs	r3, #40	; 0x28
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	2200      	movs	r2, #0
 80008d8:	210f      	movs	r1, #15
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f9cf 	bl	8000c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80008e0:	2328      	movs	r3, #40	; 0x28
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f9e6 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3720      	adds	r7, #32
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	2000000c 	.word	0x2000000c

080008fc <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <BSP_PB_GetState+0x28>)
 800090a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fb95 	bl	8001044 <HAL_GPIO_ReadPin>
 800091a:	4603      	mov	r3, r0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2000000c 	.word	0x2000000c

08000928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <SystemInit+0x60>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <SystemInit+0x60>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <SystemInit+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a12      	ldr	r2, [pc, #72]	; (800098c <SystemInit+0x64>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000948:	4b10      	ldr	r3, [pc, #64]	; (800098c <SystemInit+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <SystemInit+0x64>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <SystemInit+0x64>)
 8000954:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800095c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <SystemInit+0x64>)
 8000960:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <SystemInit+0x68>)
 8000962:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <SystemInit+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a08      	ldr	r2, [pc, #32]	; (800098c <SystemInit+0x64>)
 800096a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800096e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <SystemInit+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <SystemInit+0x60>)
 8000978:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800097c:	609a      	str	r2, [r3, #8]
#endif
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00
 800098c:	40023800 	.word	0x40023800
 8000990:	24003010 	.word	0x24003010

08000994 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80009e8:	f000 f84e 	bl	8000a88 <HAL_IncTick>
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_Init+0x34>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <HAL_Init+0x34>)
 80009fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fe:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_Init+0x34>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_Init+0x34>)
 8000a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f92b 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	200f      	movs	r0, #15
 8000a14:	f000 f808 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f000 fb5f 	bl	80010da <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023c00 	.word	0x40023c00

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x54>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_InitTick+0x58>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f943 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00e      	b.n	8000a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d80a      	bhi.n	8000a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	f000 f90b 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <HAL_InitTick+0x5c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000010 	.word	0x20000010
 8000a80:	20000018 	.word	0x20000018
 8000a84:	20000014 	.word	0x20000014

08000a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_IncTick+0x24>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_IncTick+0x24>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000018 	.word	0x20000018
 8000aac:	2000008c 	.word	0x2000008c

08000ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	2000008c 	.word	0x2000008c

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db0b      	blt.n	8000b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	f003 021f 	and.w	r2, r3, #31
 8000b44:	4907      	ldr	r1, [pc, #28]	; (8000b64 <__NVIC_EnableIRQ+0x38>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	095b      	lsrs	r3, r3, #5
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff29 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff3e 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff8e 	bl	8000bbc <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff31 	bl	8000b2c <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffa2 	bl	8000c24 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	e177      	b.n	8000ff8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d08:	2201      	movs	r2, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f040 8166 	bne.w	8000ff2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d005      	beq.n	8000d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d130      	bne.n	8000da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	091b      	lsrs	r3, r3, #4
 8000d8a:	f003 0201 	and.w	r2, r3, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d017      	beq.n	8000ddc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d123      	bne.n	8000e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	08da      	lsrs	r2, r3, #3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3208      	adds	r2, #8
 8000df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	220f      	movs	r2, #15
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	691a      	ldr	r2, [r3, #16]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	69b9      	ldr	r1, [r7, #24]
 8000e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0203 	and.w	r2, r3, #3
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 80c0 	beq.w	8000ff2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b66      	ldr	r3, [pc, #408]	; (8001010 <HAL_GPIO_Init+0x324>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a65      	ldr	r2, [pc, #404]	; (8001010 <HAL_GPIO_Init+0x324>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b63      	ldr	r3, [pc, #396]	; (8001010 <HAL_GPIO_Init+0x324>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8e:	4a61      	ldr	r2, [pc, #388]	; (8001014 <HAL_GPIO_Init+0x328>)
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	3302      	adds	r3, #2
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a58      	ldr	r2, [pc, #352]	; (8001018 <HAL_GPIO_Init+0x32c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d037      	beq.n	8000f2a <HAL_GPIO_Init+0x23e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a57      	ldr	r2, [pc, #348]	; (800101c <HAL_GPIO_Init+0x330>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d031      	beq.n	8000f26 <HAL_GPIO_Init+0x23a>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a56      	ldr	r2, [pc, #344]	; (8001020 <HAL_GPIO_Init+0x334>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d02b      	beq.n	8000f22 <HAL_GPIO_Init+0x236>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a55      	ldr	r2, [pc, #340]	; (8001024 <HAL_GPIO_Init+0x338>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d025      	beq.n	8000f1e <HAL_GPIO_Init+0x232>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a54      	ldr	r2, [pc, #336]	; (8001028 <HAL_GPIO_Init+0x33c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d01f      	beq.n	8000f1a <HAL_GPIO_Init+0x22e>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a53      	ldr	r2, [pc, #332]	; (800102c <HAL_GPIO_Init+0x340>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d019      	beq.n	8000f16 <HAL_GPIO_Init+0x22a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a52      	ldr	r2, [pc, #328]	; (8001030 <HAL_GPIO_Init+0x344>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d013      	beq.n	8000f12 <HAL_GPIO_Init+0x226>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a51      	ldr	r2, [pc, #324]	; (8001034 <HAL_GPIO_Init+0x348>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00d      	beq.n	8000f0e <HAL_GPIO_Init+0x222>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a50      	ldr	r2, [pc, #320]	; (8001038 <HAL_GPIO_Init+0x34c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d007      	beq.n	8000f0a <HAL_GPIO_Init+0x21e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4f      	ldr	r2, [pc, #316]	; (800103c <HAL_GPIO_Init+0x350>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_GPIO_Init+0x21a>
 8000f02:	2309      	movs	r3, #9
 8000f04:	e012      	b.n	8000f2c <HAL_GPIO_Init+0x240>
 8000f06:	230a      	movs	r3, #10
 8000f08:	e010      	b.n	8000f2c <HAL_GPIO_Init+0x240>
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	e00e      	b.n	8000f2c <HAL_GPIO_Init+0x240>
 8000f0e:	2307      	movs	r3, #7
 8000f10:	e00c      	b.n	8000f2c <HAL_GPIO_Init+0x240>
 8000f12:	2306      	movs	r3, #6
 8000f14:	e00a      	b.n	8000f2c <HAL_GPIO_Init+0x240>
 8000f16:	2305      	movs	r3, #5
 8000f18:	e008      	b.n	8000f2c <HAL_GPIO_Init+0x240>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x240>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e004      	b.n	8000f2c <HAL_GPIO_Init+0x240>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x240>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x240>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	69fa      	ldr	r2, [r7, #28]
 8000f2e:	f002 0203 	and.w	r2, r2, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4093      	lsls	r3, r2
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	4935      	ldr	r1, [pc, #212]	; (8001014 <HAL_GPIO_Init+0x328>)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f4a:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <HAL_GPIO_Init+0x354>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f6e:	4a34      	ldr	r2, [pc, #208]	; (8001040 <HAL_GPIO_Init+0x354>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f74:	4b32      	ldr	r3, [pc, #200]	; (8001040 <HAL_GPIO_Init+0x354>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f98:	4a29      	ldr	r2, [pc, #164]	; (8001040 <HAL_GPIO_Init+0x354>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <HAL_GPIO_Init+0x354>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fc2:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <HAL_GPIO_Init+0x354>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <HAL_GPIO_Init+0x354>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <HAL_GPIO_Init+0x354>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	f67f ae84 	bls.w	8000d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40013800 	.word	0x40013800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40021000 	.word	0x40021000
 800102c:	40021400 	.word	0x40021400
 8001030:	40021800 	.word	0x40021800
 8001034:	40021c00 	.word	0x40021c00
 8001038:	40022000 	.word	0x40022000
 800103c:	40022400 	.word	0x40022400
 8001040:	40013c00 	.word	0x40013c00

08001044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	4013      	ands	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e001      	b.n	8001066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001090:	e003      	b.n	800109a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	041a      	lsls	r2, r3, #16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	619a      	str	r2, [r3, #24]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b8:	887a      	ldrh	r2, [r7, #2]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4013      	ands	r3, r2
 80010be:	041a      	lsls	r2, r3, #16
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	400b      	ands	r3, r1
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <HAL_PWREx_EnableOverDrive+0x90>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a1f      	ldr	r2, [pc, #124]	; (8001178 <HAL_PWREx_EnableOverDrive+0x90>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_PWREx_EnableOverDrive+0x90>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_PWREx_EnableOverDrive+0x94>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001114:	f7ff fccc 	bl	8000ab0 <HAL_GetTick>
 8001118:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800111a:	e009      	b.n	8001130 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800111c:	f7ff fcc8 	bl	8000ab0 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800112a:	d901      	bls.n	8001130 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e01f      	b.n	8001170 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_PWREx_EnableOverDrive+0x98>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113c:	d1ee      	bne.n	800111c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001144:	f7ff fcb4 	bl	8000ab0 <HAL_GetTick>
 8001148:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800114a:	e009      	b.n	8001160 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800114c:	f7ff fcb0 	bl	8000ab0 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800115a:	d901      	bls.n	8001160 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e007      	b.n	8001170 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <HAL_PWREx_EnableOverDrive+0x98>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800116c:	d1ee      	bne.n	800114c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	420e0040 	.word	0x420e0040
 8001180:	40007000 	.word	0x40007000
 8001184:	420e0044 	.word	0x420e0044

08001188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e264      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d075      	beq.n	8001292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a6:	4ba3      	ldr	r3, [pc, #652]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d00c      	beq.n	80011cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b2:	4ba0      	ldr	r3, [pc, #640]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d112      	bne.n	80011e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011be:	4b9d      	ldr	r3, [pc, #628]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ca:	d10b      	bne.n	80011e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	4b99      	ldr	r3, [pc, #612]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d05b      	beq.n	8001290 <HAL_RCC_OscConfig+0x108>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d157      	bne.n	8001290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e23f      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ec:	d106      	bne.n	80011fc <HAL_RCC_OscConfig+0x74>
 80011ee:	4b91      	ldr	r3, [pc, #580]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a90      	ldr	r2, [pc, #576]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e01d      	b.n	8001238 <HAL_RCC_OscConfig+0xb0>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x98>
 8001206:	4b8b      	ldr	r3, [pc, #556]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a8a      	ldr	r2, [pc, #552]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a87      	ldr	r2, [pc, #540]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e00b      	b.n	8001238 <HAL_RCC_OscConfig+0xb0>
 8001220:	4b84      	ldr	r3, [pc, #528]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a83      	ldr	r2, [pc, #524]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b81      	ldr	r3, [pc, #516]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a80      	ldr	r2, [pc, #512]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d013      	beq.n	8001268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fc36 	bl	8000ab0 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fc32 	bl	8000ab0 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e204      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	4b76      	ldr	r3, [pc, #472]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0xc0>
 8001266:	e014      	b.n	8001292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fc22 	bl	8000ab0 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fc1e 	bl	8000ab0 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e1f0      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	4b6c      	ldr	r3, [pc, #432]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0xe8>
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d063      	beq.n	8001366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129e:	4b65      	ldr	r3, [pc, #404]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00b      	beq.n	80012c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012aa:	4b62      	ldr	r3, [pc, #392]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d11c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b6:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d116      	bne.n	80012f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c2:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_RCC_OscConfig+0x152>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d001      	beq.n	80012da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e1c4      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012da:	4b56      	ldr	r3, [pc, #344]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4952      	ldr	r1, [pc, #328]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ee:	e03a      	b.n	8001366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d020      	beq.n	800133a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f8:	4b4f      	ldr	r3, [pc, #316]	; (8001438 <HAL_RCC_OscConfig+0x2b0>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fe:	f7ff fbd7 	bl	8000ab0 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fbd3 	bl	8000ab0 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e1a5      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	4b46      	ldr	r3, [pc, #280]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b43      	ldr	r3, [pc, #268]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4940      	ldr	r1, [pc, #256]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
 8001338:	e015      	b.n	8001366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133a:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <HAL_RCC_OscConfig+0x2b0>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fbb6 	bl	8000ab0 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff fbb2 	bl	8000ab0 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e184      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	4b36      	ldr	r3, [pc, #216]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d030      	beq.n	80013d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d016      	beq.n	80013a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137a:	4b30      	ldr	r3, [pc, #192]	; (800143c <HAL_RCC_OscConfig+0x2b4>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001380:	f7ff fb96 	bl	8000ab0 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001388:	f7ff fb92 	bl	8000ab0 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e164      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x200>
 80013a6:	e015      	b.n	80013d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <HAL_RCC_OscConfig+0x2b4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fb7f 	bl	8000ab0 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b6:	f7ff fb7b 	bl	8000ab0 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e14d      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80013ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f0      	bne.n	80013b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80a0 	beq.w	8001522 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10f      	bne.n	8001412 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800140e:	2301      	movs	r3, #1
 8001410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_RCC_OscConfig+0x2b8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141a:	2b00      	cmp	r3, #0
 800141c:	d121      	bne.n	8001462 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_RCC_OscConfig+0x2b8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_RCC_OscConfig+0x2b8>)
 8001424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142a:	f7ff fb41 	bl	8000ab0 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001430:	e011      	b.n	8001456 <HAL_RCC_OscConfig+0x2ce>
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	42470000 	.word	0x42470000
 800143c:	42470e80 	.word	0x42470e80
 8001440:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001444:	f7ff fb34 	bl	8000ab0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e106      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001456:	4b85      	ldr	r3, [pc, #532]	; (800166c <HAL_RCC_OscConfig+0x4e4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d106      	bne.n	8001478 <HAL_RCC_OscConfig+0x2f0>
 800146a:	4b81      	ldr	r3, [pc, #516]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146e:	4a80      	ldr	r2, [pc, #512]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6713      	str	r3, [r2, #112]	; 0x70
 8001476:	e01c      	b.n	80014b2 <HAL_RCC_OscConfig+0x32a>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b05      	cmp	r3, #5
 800147e:	d10c      	bne.n	800149a <HAL_RCC_OscConfig+0x312>
 8001480:	4b7b      	ldr	r3, [pc, #492]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001484:	4a7a      	ldr	r2, [pc, #488]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	6713      	str	r3, [r2, #112]	; 0x70
 800148c:	4b78      	ldr	r3, [pc, #480]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	4a77      	ldr	r2, [pc, #476]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6713      	str	r3, [r2, #112]	; 0x70
 8001498:	e00b      	b.n	80014b2 <HAL_RCC_OscConfig+0x32a>
 800149a:	4b75      	ldr	r3, [pc, #468]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	4a74      	ldr	r2, [pc, #464]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	6713      	str	r3, [r2, #112]	; 0x70
 80014a6:	4b72      	ldr	r3, [pc, #456]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a71      	ldr	r2, [pc, #452]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d015      	beq.n	80014e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ba:	f7ff faf9 	bl	8000ab0 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	e00a      	b.n	80014d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c2:	f7ff faf5 	bl	8000ab0 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e0c5      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d8:	4b65      	ldr	r3, [pc, #404]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0ee      	beq.n	80014c2 <HAL_RCC_OscConfig+0x33a>
 80014e4:	e014      	b.n	8001510 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fae3 	bl	8000ab0 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	e00a      	b.n	8001504 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff fadf 	bl	8000ab0 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0af      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001504:	4b5a      	ldr	r3, [pc, #360]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1ee      	bne.n	80014ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d105      	bne.n	8001522 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001516:	4b56      	ldr	r3, [pc, #344]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a55      	ldr	r2, [pc, #340]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 800151c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 809b 	beq.w	8001662 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800152c:	4b50      	ldr	r3, [pc, #320]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b08      	cmp	r3, #8
 8001536:	d05c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d141      	bne.n	80015c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001540:	4b4c      	ldr	r3, [pc, #304]	; (8001674 <HAL_RCC_OscConfig+0x4ec>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff fab3 	bl	8000ab0 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154e:	f7ff faaf 	bl	8000ab0 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e081      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001560:	4b43      	ldr	r3, [pc, #268]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f0      	bne.n	800154e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69da      	ldr	r2, [r3, #28]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	019b      	lsls	r3, r3, #6
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	085b      	lsrs	r3, r3, #1
 8001584:	3b01      	subs	r3, #1
 8001586:	041b      	lsls	r3, r3, #16
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	061b      	lsls	r3, r3, #24
 8001590:	4937      	ldr	r1, [pc, #220]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001596:	4b37      	ldr	r3, [pc, #220]	; (8001674 <HAL_RCC_OscConfig+0x4ec>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fa88 	bl	8000ab0 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff fa84 	bl	8000ab0 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e056      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b6:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x41c>
 80015c2:	e04e      	b.n	8001662 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_RCC_OscConfig+0x4ec>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff fa71 	bl	8000ab0 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff fa6d 	bl	8000ab0 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e03f      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x44a>
 80015f0:	e037      	b.n	8001662 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e032      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d028      	beq.n	800165e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d121      	bne.n	800165e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001624:	429a      	cmp	r2, r3
 8001626:	d11a      	bne.n	800165e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800162e:	4013      	ands	r3, r2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001634:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001636:	4293      	cmp	r3, r2
 8001638:	d111      	bne.n	800165e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	3b01      	subs	r3, #1
 8001648:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d107      	bne.n	800165e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d001      	beq.n	8001662 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40007000 	.word	0x40007000
 8001670:	40023800 	.word	0x40023800
 8001674:	42470060 	.word	0x42470060

08001678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0cc      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800168c:	4b68      	ldr	r3, [pc, #416]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d90c      	bls.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b65      	ldr	r3, [pc, #404]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0b8      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d020      	beq.n	8001702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016cc:	4b59      	ldr	r3, [pc, #356]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	494d      	ldr	r1, [pc, #308]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d044      	beq.n	8001798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d119      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e07f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d003      	beq.n	8001736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001732:	2b03      	cmp	r3, #3
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e067      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f023 0203 	bic.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4934      	ldr	r1, [pc, #208]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001768:	f7ff f9a2 	bl	8000ab0 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	e00a      	b.n	8001786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001770:	f7ff f99e 	bl	8000ab0 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e04f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 020c 	and.w	r2, r3, #12
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d1eb      	bne.n	8001770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d20c      	bcs.n	80017c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e032      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4916      	ldr	r1, [pc, #88]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	490e      	ldr	r1, [pc, #56]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017fe:	f000 f821 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8001802:	4602      	mov	r2, r0
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	490a      	ldr	r1, [pc, #40]	; (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	5ccb      	ldrb	r3, [r1, r3]
 8001812:	fa22 f303 	lsr.w	r3, r2, r3
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1c8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f902 	bl	8000a28 <HAL_InitTick>

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00
 8001834:	40023800 	.word	0x40023800
 8001838:	080024c0 	.word	0x080024c0
 800183c:	20000010 	.word	0x20000010
 8001840:	20000014 	.word	0x20000014

08001844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001844:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	2300      	movs	r3, #0
 8001856:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b08      	cmp	r3, #8
 8001866:	d00d      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x40>
 8001868:	2b08      	cmp	r3, #8
 800186a:	f200 80bd 	bhi.w	80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x34>
 8001872:	2b04      	cmp	r3, #4
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x3a>
 8001876:	e0b7      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001878:	4b61      	ldr	r3, [pc, #388]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800187a:	60bb      	str	r3, [r7, #8]
       break;
 800187c:	e0b7      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800187e:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001880:	60bb      	str	r3, [r7, #8]
      break;
 8001882:	e0b4      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001884:	4b5d      	ldr	r3, [pc, #372]	; (80019fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800188c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188e:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d04d      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189a:	4b58      	ldr	r3, [pc, #352]	; (80019fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	099b      	lsrs	r3, r3, #6
 80018a0:	461a      	mov	r2, r3
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018aa:	f04f 0100 	mov.w	r1, #0
 80018ae:	ea02 0800 	and.w	r8, r2, r0
 80018b2:	ea03 0901 	and.w	r9, r3, r1
 80018b6:	4640      	mov	r0, r8
 80018b8:	4649      	mov	r1, r9
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	014b      	lsls	r3, r1, #5
 80018c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018c8:	0142      	lsls	r2, r0, #5
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	ebb0 0008 	subs.w	r0, r0, r8
 80018d2:	eb61 0109 	sbc.w	r1, r1, r9
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	018b      	lsls	r3, r1, #6
 80018e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018e4:	0182      	lsls	r2, r0, #6
 80018e6:	1a12      	subs	r2, r2, r0
 80018e8:	eb63 0301 	sbc.w	r3, r3, r1
 80018ec:	f04f 0000 	mov.w	r0, #0
 80018f0:	f04f 0100 	mov.w	r1, #0
 80018f4:	00d9      	lsls	r1, r3, #3
 80018f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018fa:	00d0      	lsls	r0, r2, #3
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	eb12 0208 	adds.w	r2, r2, r8
 8001904:	eb43 0309 	adc.w	r3, r3, r9
 8001908:	f04f 0000 	mov.w	r0, #0
 800190c:	f04f 0100 	mov.w	r1, #0
 8001910:	0259      	lsls	r1, r3, #9
 8001912:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001916:	0250      	lsls	r0, r2, #9
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	461a      	mov	r2, r3
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	f7fe fc60 	bl	80001ec <__aeabi_uldivmod>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4613      	mov	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e04a      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001936:	4b31      	ldr	r3, [pc, #196]	; (80019fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	099b      	lsrs	r3, r3, #6
 800193c:	461a      	mov	r2, r3
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001946:	f04f 0100 	mov.w	r1, #0
 800194a:	ea02 0400 	and.w	r4, r2, r0
 800194e:	ea03 0501 	and.w	r5, r3, r1
 8001952:	4620      	mov	r0, r4
 8001954:	4629      	mov	r1, r5
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	014b      	lsls	r3, r1, #5
 8001960:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001964:	0142      	lsls	r2, r0, #5
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	1b00      	subs	r0, r0, r4
 800196c:	eb61 0105 	sbc.w	r1, r1, r5
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	018b      	lsls	r3, r1, #6
 800197a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800197e:	0182      	lsls	r2, r0, #6
 8001980:	1a12      	subs	r2, r2, r0
 8001982:	eb63 0301 	sbc.w	r3, r3, r1
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	00d9      	lsls	r1, r3, #3
 8001990:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001994:	00d0      	lsls	r0, r2, #3
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	1912      	adds	r2, r2, r4
 800199c:	eb45 0303 	adc.w	r3, r5, r3
 80019a0:	f04f 0000 	mov.w	r0, #0
 80019a4:	f04f 0100 	mov.w	r1, #0
 80019a8:	0299      	lsls	r1, r3, #10
 80019aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019ae:	0290      	lsls	r0, r2, #10
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	461a      	mov	r2, r3
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	f7fe fc14 	bl	80001ec <__aeabi_uldivmod>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4613      	mov	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	0c1b      	lsrs	r3, r3, #16
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	3301      	adds	r3, #1
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e4:	60bb      	str	r3, [r7, #8]
      break;
 80019e6:	e002      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019ea:	60bb      	str	r3, [r7, #8]
      break;
 80019ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ee:	68bb      	ldr	r3, [r7, #8]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	00f42400 	.word	0x00f42400
 8001a04:	007a1200 	.word	0x007a1200

08001a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000010 	.word	0x20000010

08001a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a24:	f7ff fff0 	bl	8001a08 <HAL_RCC_GetHCLKFreq>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	0a9b      	lsrs	r3, r3, #10
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	4903      	ldr	r1, [pc, #12]	; (8001a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a36:	5ccb      	ldrb	r3, [r1, r3]
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	080024d0 	.word	0x080024d0

08001a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a4c:	f7ff ffdc 	bl	8001a08 <HAL_RCC_GetHCLKFreq>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	0b5b      	lsrs	r3, r3, #13
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	4903      	ldr	r1, [pc, #12]	; (8001a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a5e:	5ccb      	ldrb	r3, [r1, r3]
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	080024d0 	.word	0x080024d0

08001a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e03f      	b.n	8001b02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fbfe 	bl	8002298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2224      	movs	r2, #36	; 0x24
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f929 	bl	8001d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b08a      	sub	sp, #40	; 0x28
 8001b0e:	af02      	add	r7, sp, #8
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4613      	mov	r3, r2
 8001b18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d17c      	bne.n	8001c24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <HAL_UART_Transmit+0x2c>
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e075      	b.n	8001c26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_UART_Transmit+0x3e>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e06e      	b.n	8001c26 <HAL_UART_Transmit+0x11c>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2221      	movs	r2, #33	; 0x21
 8001b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b5e:	f7fe ffa7 	bl	8000ab0 <HAL_GetTick>
 8001b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	88fa      	ldrh	r2, [r7, #6]
 8001b68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b78:	d108      	bne.n	8001b8c <HAL_UART_Transmit+0x82>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d104      	bne.n	8001b8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	e003      	b.n	8001b94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b9c:	e02a      	b.n	8001bf4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f840 	bl	8001c2e <UART_WaitOnFlagUntilTimeout>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e036      	b.n	8001c26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10b      	bne.n	8001bd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	e007      	b.n	8001be6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	3301      	adds	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1cf      	bne.n	8001b9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2140      	movs	r1, #64	; 0x40
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f810 	bl	8001c2e <UART_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e006      	b.n	8001c26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e000      	b.n	8001c26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c24:	2302      	movs	r3, #2
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3720      	adds	r7, #32
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b090      	sub	sp, #64	; 0x40
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c3e:	e050      	b.n	8001ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c46:	d04c      	beq.n	8001ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x30>
 8001c4e:	f7fe ff2f 	bl	8000ab0 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d241      	bcs.n	8001ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	330c      	adds	r3, #12
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	e853 3f00 	ldrex	r3, [r3]
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	330c      	adds	r3, #12
 8001c7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c7e:	637a      	str	r2, [r7, #52]	; 0x34
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c86:	e841 2300 	strex	r3, r2, [r1]
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1e5      	bne.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	3314      	adds	r3, #20
 8001c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	e853 3f00 	ldrex	r3, [r3]
 8001ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3314      	adds	r3, #20
 8001cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cb2:	623a      	str	r2, [r7, #32]
 8001cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cb6:	69f9      	ldr	r1, [r7, #28]
 8001cb8:	6a3a      	ldr	r2, [r7, #32]
 8001cba:	e841 2300 	strex	r3, r2, [r1]
 8001cbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1e5      	bne.n	8001c92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e00f      	b.n	8001d02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4013      	ands	r3, r2
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	bf0c      	ite	eq
 8001cf2:	2301      	moveq	r3, #1
 8001cf4:	2300      	movne	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d09f      	beq.n	8001c40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3740      	adds	r7, #64	; 0x40
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d10:	b09f      	sub	sp, #124	; 0x7c
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d22:	68d9      	ldr	r1, [r3, #12]
 8001d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	ea40 0301 	orr.w	r3, r0, r1
 8001d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d50:	f021 010c 	bic.w	r1, r1, #12
 8001d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d6a:	6999      	ldr	r1, [r3, #24]
 8001d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	ea40 0301 	orr.w	r3, r0, r1
 8001d74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4bc5      	ldr	r3, [pc, #788]	; (8002090 <UART_SetConfig+0x384>)
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d004      	beq.n	8001d8a <UART_SetConfig+0x7e>
 8001d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4bc3      	ldr	r3, [pc, #780]	; (8002094 <UART_SetConfig+0x388>)
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d103      	bne.n	8001d92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d8a:	f7ff fe5d 	bl	8001a48 <HAL_RCC_GetPCLK2Freq>
 8001d8e:	6778      	str	r0, [r7, #116]	; 0x74
 8001d90:	e002      	b.n	8001d98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d92:	f7ff fe45 	bl	8001a20 <HAL_RCC_GetPCLK1Freq>
 8001d96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001da0:	f040 80b6 	bne.w	8001f10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001da6:	461c      	mov	r4, r3
 8001da8:	f04f 0500 	mov.w	r5, #0
 8001dac:	4622      	mov	r2, r4
 8001dae:	462b      	mov	r3, r5
 8001db0:	1891      	adds	r1, r2, r2
 8001db2:	6439      	str	r1, [r7, #64]	; 0x40
 8001db4:	415b      	adcs	r3, r3
 8001db6:	647b      	str	r3, [r7, #68]	; 0x44
 8001db8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001dbc:	1912      	adds	r2, r2, r4
 8001dbe:	eb45 0303 	adc.w	r3, r5, r3
 8001dc2:	f04f 0000 	mov.w	r0, #0
 8001dc6:	f04f 0100 	mov.w	r1, #0
 8001dca:	00d9      	lsls	r1, r3, #3
 8001dcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dd0:	00d0      	lsls	r0, r2, #3
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	1911      	adds	r1, r2, r4
 8001dd8:	6639      	str	r1, [r7, #96]	; 0x60
 8001dda:	416b      	adcs	r3, r5
 8001ddc:	667b      	str	r3, [r7, #100]	; 0x64
 8001dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	461a      	mov	r2, r3
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	1891      	adds	r1, r2, r2
 8001dea:	63b9      	str	r1, [r7, #56]	; 0x38
 8001dec:	415b      	adcs	r3, r3
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001df4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001df8:	f7fe f9f8 	bl	80001ec <__aeabi_uldivmod>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4ba5      	ldr	r3, [pc, #660]	; (8002098 <UART_SetConfig+0x38c>)
 8001e02:	fba3 2302 	umull	r2, r3, r3, r2
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	011e      	lsls	r6, r3, #4
 8001e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e0c:	461c      	mov	r4, r3
 8001e0e:	f04f 0500 	mov.w	r5, #0
 8001e12:	4622      	mov	r2, r4
 8001e14:	462b      	mov	r3, r5
 8001e16:	1891      	adds	r1, r2, r2
 8001e18:	6339      	str	r1, [r7, #48]	; 0x30
 8001e1a:	415b      	adcs	r3, r3
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e22:	1912      	adds	r2, r2, r4
 8001e24:	eb45 0303 	adc.w	r3, r5, r3
 8001e28:	f04f 0000 	mov.w	r0, #0
 8001e2c:	f04f 0100 	mov.w	r1, #0
 8001e30:	00d9      	lsls	r1, r3, #3
 8001e32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e36:	00d0      	lsls	r0, r2, #3
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	1911      	adds	r1, r2, r4
 8001e3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e40:	416b      	adcs	r3, r5
 8001e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	1891      	adds	r1, r2, r2
 8001e50:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e52:	415b      	adcs	r3, r3
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e5e:	f7fe f9c5 	bl	80001ec <__aeabi_uldivmod>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4b8c      	ldr	r3, [pc, #560]	; (8002098 <UART_SetConfig+0x38c>)
 8001e68:	fba3 1302 	umull	r1, r3, r3, r2
 8001e6c:	095b      	lsrs	r3, r3, #5
 8001e6e:	2164      	movs	r1, #100	; 0x64
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	3332      	adds	r3, #50	; 0x32
 8001e7a:	4a87      	ldr	r2, [pc, #540]	; (8002098 <UART_SetConfig+0x38c>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e88:	441e      	add	r6, r3
 8001e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f04f 0100 	mov.w	r1, #0
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	1894      	adds	r4, r2, r2
 8001e98:	623c      	str	r4, [r7, #32]
 8001e9a:	415b      	adcs	r3, r3
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ea2:	1812      	adds	r2, r2, r0
 8001ea4:	eb41 0303 	adc.w	r3, r1, r3
 8001ea8:	f04f 0400 	mov.w	r4, #0
 8001eac:	f04f 0500 	mov.w	r5, #0
 8001eb0:	00dd      	lsls	r5, r3, #3
 8001eb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001eb6:	00d4      	lsls	r4, r2, #3
 8001eb8:	4622      	mov	r2, r4
 8001eba:	462b      	mov	r3, r5
 8001ebc:	1814      	adds	r4, r2, r0
 8001ebe:	653c      	str	r4, [r7, #80]	; 0x50
 8001ec0:	414b      	adcs	r3, r1
 8001ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8001ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	1891      	adds	r1, r2, r2
 8001ed0:	61b9      	str	r1, [r7, #24]
 8001ed2:	415b      	adcs	r3, r3
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001ede:	f7fe f985 	bl	80001ec <__aeabi_uldivmod>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4b6c      	ldr	r3, [pc, #432]	; (8002098 <UART_SetConfig+0x38c>)
 8001ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8001eec:	095b      	lsrs	r3, r3, #5
 8001eee:	2164      	movs	r1, #100	; 0x64
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	3332      	adds	r3, #50	; 0x32
 8001efa:	4a67      	ldr	r2, [pc, #412]	; (8002098 <UART_SetConfig+0x38c>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	095b      	lsrs	r3, r3, #5
 8001f02:	f003 0207 	and.w	r2, r3, #7
 8001f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4432      	add	r2, r6
 8001f0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f0e:	e0b9      	b.n	8002084 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f12:	461c      	mov	r4, r3
 8001f14:	f04f 0500 	mov.w	r5, #0
 8001f18:	4622      	mov	r2, r4
 8001f1a:	462b      	mov	r3, r5
 8001f1c:	1891      	adds	r1, r2, r2
 8001f1e:	6139      	str	r1, [r7, #16]
 8001f20:	415b      	adcs	r3, r3
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f28:	1912      	adds	r2, r2, r4
 8001f2a:	eb45 0303 	adc.w	r3, r5, r3
 8001f2e:	f04f 0000 	mov.w	r0, #0
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	00d9      	lsls	r1, r3, #3
 8001f38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f3c:	00d0      	lsls	r0, r2, #3
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	eb12 0804 	adds.w	r8, r2, r4
 8001f46:	eb43 0905 	adc.w	r9, r3, r5
 8001f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f04f 0100 	mov.w	r1, #0
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	008b      	lsls	r3, r1, #2
 8001f5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f62:	0082      	lsls	r2, r0, #2
 8001f64:	4640      	mov	r0, r8
 8001f66:	4649      	mov	r1, r9
 8001f68:	f7fe f940 	bl	80001ec <__aeabi_uldivmod>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4b49      	ldr	r3, [pc, #292]	; (8002098 <UART_SetConfig+0x38c>)
 8001f72:	fba3 2302 	umull	r2, r3, r3, r2
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	011e      	lsls	r6, r3, #4
 8001f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f04f 0100 	mov.w	r1, #0
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	1894      	adds	r4, r2, r2
 8001f88:	60bc      	str	r4, [r7, #8]
 8001f8a:	415b      	adcs	r3, r3
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f92:	1812      	adds	r2, r2, r0
 8001f94:	eb41 0303 	adc.w	r3, r1, r3
 8001f98:	f04f 0400 	mov.w	r4, #0
 8001f9c:	f04f 0500 	mov.w	r5, #0
 8001fa0:	00dd      	lsls	r5, r3, #3
 8001fa2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001fa6:	00d4      	lsls	r4, r2, #3
 8001fa8:	4622      	mov	r2, r4
 8001faa:	462b      	mov	r3, r5
 8001fac:	1814      	adds	r4, r2, r0
 8001fae:	64bc      	str	r4, [r7, #72]	; 0x48
 8001fb0:	414b      	adcs	r3, r1
 8001fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f04f 0100 	mov.w	r1, #0
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	008b      	lsls	r3, r1, #2
 8001fc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001fcc:	0082      	lsls	r2, r0, #2
 8001fce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fd2:	f7fe f90b 	bl	80001ec <__aeabi_uldivmod>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <UART_SetConfig+0x38c>)
 8001fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	2164      	movs	r1, #100	; 0x64
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	3332      	adds	r3, #50	; 0x32
 8001fee:	4a2a      	ldr	r2, [pc, #168]	; (8002098 <UART_SetConfig+0x38c>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffa:	441e      	add	r6, r3
 8001ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ffe:	4618      	mov	r0, r3
 8002000:	f04f 0100 	mov.w	r1, #0
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	1894      	adds	r4, r2, r2
 800200a:	603c      	str	r4, [r7, #0]
 800200c:	415b      	adcs	r3, r3
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002014:	1812      	adds	r2, r2, r0
 8002016:	eb41 0303 	adc.w	r3, r1, r3
 800201a:	f04f 0400 	mov.w	r4, #0
 800201e:	f04f 0500 	mov.w	r5, #0
 8002022:	00dd      	lsls	r5, r3, #3
 8002024:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002028:	00d4      	lsls	r4, r2, #3
 800202a:	4622      	mov	r2, r4
 800202c:	462b      	mov	r3, r5
 800202e:	eb12 0a00 	adds.w	sl, r2, r0
 8002032:	eb43 0b01 	adc.w	fp, r3, r1
 8002036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4618      	mov	r0, r3
 800203c:	f04f 0100 	mov.w	r1, #0
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	008b      	lsls	r3, r1, #2
 800204a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800204e:	0082      	lsls	r2, r0, #2
 8002050:	4650      	mov	r0, sl
 8002052:	4659      	mov	r1, fp
 8002054:	f7fe f8ca 	bl	80001ec <__aeabi_uldivmod>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <UART_SetConfig+0x38c>)
 800205e:	fba3 1302 	umull	r1, r3, r3, r2
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2164      	movs	r1, #100	; 0x64
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	3332      	adds	r3, #50	; 0x32
 8002070:	4a09      	ldr	r2, [pc, #36]	; (8002098 <UART_SetConfig+0x38c>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	f003 020f 	and.w	r2, r3, #15
 800207c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4432      	add	r2, r6
 8002082:	609a      	str	r2, [r3, #8]
}
 8002084:	bf00      	nop
 8002086:	377c      	adds	r7, #124	; 0x7c
 8002088:	46bd      	mov	sp, r7
 800208a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800208e:	bf00      	nop
 8002090:	40011000 	.word	0x40011000
 8002094:	40011400 	.word	0x40011400
 8002098:	51eb851f 	.word	0x51eb851f

0800209c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800209c:	b5b0      	push	{r4, r5, r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */

  uint8_t mensaje[] = "\nInicializacion Correcta! \n\r";
 80020a2:	4b43      	ldr	r3, [pc, #268]	; (80021b0 <main+0x114>)
 80020a4:	463c      	mov	r4, r7
 80020a6:	461d      	mov	r5, r3
 80020a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020b0:	c407      	stmia	r4!, {r0, r1, r2}
 80020b2:	7023      	strb	r3, [r4, #0]

  HAL_Init();
 80020b4:	f7fe fc9c 	bl	80009f0 <HAL_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80020b8:	2100      	movs	r1, #0
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7fe fbc8 	bl	8000850 <BSP_PB_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 80020c0:	f000 f882 	bl	80021c8 <SystemClock_Config>

  /* Initialize BSP Led for LED2 and LED3*/
  BSP_LED_Init(LED1);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7fe fb3f 	bl	8000748 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 80020ca:	2001      	movs	r0, #1
 80020cc:	f7fe fb3c 	bl	8000748 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80020d0:	2002      	movs	r0, #2
 80020d2:	f7fe fb39 	bl	8000748 <BSP_LED_Init>

  /* Initialize duration delay for LED1, LED2 and LED3 */
  	delayInit(&delayLed1, DELAY1_LED1);
 80020d6:	2164      	movs	r1, #100	; 0x64
 80020d8:	4836      	ldr	r0, [pc, #216]	; (80021b4 <main+0x118>)
 80020da:	f7fe fa7d 	bl	80005d8 <delayInit>
  	delayInit(&delayLed2, DELAY1_LED2);
 80020de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80020e2:	4835      	ldr	r0, [pc, #212]	; (80021b8 <main+0x11c>)
 80020e4:	f7fe fa78 	bl	80005d8 <delayInit>
  	delayInit(&delayLed3, DELAY1_LED3);
 80020e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020ec:	4833      	ldr	r0, [pc, #204]	; (80021bc <main+0x120>)
 80020ee:	f7fe fa73 	bl	80005d8 <delayInit>
  	debounceInit();
 80020f2:	f7fe f9f7 	bl	80004e4 <debounceInit>

  	uint8_t flag = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	77fb      	strb	r3, [r7, #31]
/* comprobancion de Inicializacion*/
  if(uartInit()){
 80020fa:	f7fe fabf 	bl	800067c <uartInit>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <main+0x70>

	  BSP_LED_On(LED1);
 8002104:	2000      	movs	r0, #0
 8002106:	f7fe fb6f 	bl	80007e8 <BSP_LED_On>
 800210a:	e002      	b.n	8002112 <main+0x76>

  } else {

	  BSP_LED_On(LED3);
 800210c:	2002      	movs	r0, #2
 800210e:	f7fe fb6b 	bl	80007e8 <BSP_LED_On>
  }

  uartSendString(&mensaje);
 8002112:	463b      	mov	r3, r7
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe faf9 	bl	800070c <uartSendString>

  /* Infinite loop */
  while (1)
  {
	  if(BUTTON_PRESSED == debounceUpdate()){
 800211a:	f7fe f9f7 	bl	800050c <debounceUpdate>
 800211e:	4603      	mov	r3, r0
 8002120:	2b01      	cmp	r3, #1
 8002122:	d129      	bne.n	8002178 <main+0xdc>
	  			flag = ~flag;
 8002124:	7ffb      	ldrb	r3, [r7, #31]
 8002126:	43db      	mvns	r3, r3
 8002128:	77fb      	strb	r3, [r7, #31]
	  			if(flag)
 800212a:	7ffb      	ldrb	r3, [r7, #31]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <main+0xba>
	  			{
	  				delayWrite(&delayLed1,DELAY2_LED1);
 8002130:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002134:	481f      	ldr	r0, [pc, #124]	; (80021b4 <main+0x118>)
 8002136:	f7fe fa8f 	bl	8000658 <delayWrite>
	  				delayWrite(&delayLed2,DELAY2_LED2);
 800213a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800213e:	481e      	ldr	r0, [pc, #120]	; (80021b8 <main+0x11c>)
 8002140:	f7fe fa8a 	bl	8000658 <delayWrite>
	  				delayWrite(&delayLed3,DELAY2_LED3);
 8002144:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002148:	481c      	ldr	r0, [pc, #112]	; (80021bc <main+0x120>)
 800214a:	f7fe fa85 	bl	8000658 <delayWrite>
	  				uartSendString("Periodo modo 2:\n\rPara todos los led es: 500 ms \n\r");
 800214e:	481c      	ldr	r0, [pc, #112]	; (80021c0 <main+0x124>)
 8002150:	f7fe fadc 	bl	800070c <uartSendString>
 8002154:	e010      	b.n	8002178 <main+0xdc>

	  			}else{

	  				delayWrite(&delayLed1,DELAY1_LED1);
 8002156:	2164      	movs	r1, #100	; 0x64
 8002158:	4816      	ldr	r0, [pc, #88]	; (80021b4 <main+0x118>)
 800215a:	f7fe fa7d 	bl	8000658 <delayWrite>
	  				delayWrite(&delayLed2,DELAY1_LED2);
 800215e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002162:	4815      	ldr	r0, [pc, #84]	; (80021b8 <main+0x11c>)
 8002164:	f7fe fa78 	bl	8000658 <delayWrite>
	  				delayWrite(&delayLed3,DELAY1_LED3);
 8002168:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800216c:	4813      	ldr	r0, [pc, #76]	; (80021bc <main+0x120>)
 800216e:	f7fe fa73 	bl	8000658 <delayWrite>
	  				uartSendString("Periodo modo 1:\n\rLed 1: 100 ms\n\rLed 2: 500 ms\n\rLed 3: 1000 ms \n\r");
 8002172:	4814      	ldr	r0, [pc, #80]	; (80021c4 <main+0x128>)
 8002174:	f7fe faca 	bl	800070c <uartSendString>
	  			}
	  		}

	  		/* Validation of the delay duration */
	  		if(delayRead(&delayLed1)){
 8002178:	480e      	ldr	r0, [pc, #56]	; (80021b4 <main+0x118>)
 800217a:	f7fe fa41 	bl	8000600 <delayRead>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <main+0xee>
	  			BSP_LED_Toggle(LED1);
 8002184:	2000      	movs	r0, #0
 8002186:	f7fe fb49 	bl	800081c <BSP_LED_Toggle>
	  		}
	  		if(delayRead(&delayLed2)){
 800218a:	480b      	ldr	r0, [pc, #44]	; (80021b8 <main+0x11c>)
 800218c:	f7fe fa38 	bl	8000600 <delayRead>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <main+0x100>
	  			BSP_LED_Toggle(LED2);
 8002196:	2001      	movs	r0, #1
 8002198:	f7fe fb40 	bl	800081c <BSP_LED_Toggle>
	  		}
	  		if(delayRead(&delayLed3)){
 800219c:	4807      	ldr	r0, [pc, #28]	; (80021bc <main+0x120>)
 800219e:	f7fe fa2f 	bl	8000600 <delayRead>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0b8      	beq.n	800211a <main+0x7e>
	  			BSP_LED_Toggle(LED3);
 80021a8:	2002      	movs	r0, #2
 80021aa:	f7fe fb37 	bl	800081c <BSP_LED_Toggle>
	  if(BUTTON_PRESSED == debounceUpdate()){
 80021ae:	e7b4      	b.n	800211a <main+0x7e>
 80021b0:	08002498 	.word	0x08002498
 80021b4:	2000009c 	.word	0x2000009c
 80021b8:	200000a8 	.word	0x200000a8
 80021bc:	20000090 	.word	0x20000090
 80021c0:	08002420 	.word	0x08002420
 80021c4:	08002454 	.word	0x08002454

080021c8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b094      	sub	sp, #80	; 0x50
 80021cc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <SystemClock_Config+0xbc>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	4a2b      	ldr	r2, [pc, #172]	; (8002284 <SystemClock_Config+0xbc>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021dc:	6413      	str	r3, [r2, #64]	; 0x40
 80021de:	4b29      	ldr	r3, [pc, #164]	; (8002284 <SystemClock_Config+0xbc>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	4b26      	ldr	r3, [pc, #152]	; (8002288 <SystemClock_Config+0xc0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a25      	ldr	r2, [pc, #148]	; (8002288 <SystemClock_Config+0xc0>)
 80021f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b23      	ldr	r3, [pc, #140]	; (8002288 <SystemClock_Config+0xc0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002206:	2301      	movs	r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800220a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800220e:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002210:	2302      	movs	r3, #2
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002214:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 800221a:	2308      	movs	r3, #8
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800221e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002224:	2302      	movs	r3, #2
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002228:	2307      	movs	r3, #7
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe ffa9 	bl	8001188 <HAL_RCC_OscConfig>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 800223c:	f000 f826 	bl	800228c <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002240:	f7fe ff52 	bl	80010e8 <HAL_PWREx_EnableOverDrive>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 800224a:	f000 f81f 	bl	800228c <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800224e:	230f      	movs	r3, #15
 8002250:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002252:	2302      	movs	r3, #2
 8002254:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002256:	2300      	movs	r3, #0
 8002258:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800225a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800225e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002264:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002266:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800226a:	2105      	movs	r1, #5
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fa03 	bl	8001678 <HAL_RCC_ClockConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8002278:	f000 f808 	bl	800228c <Error_Handler>
  }
}
 800227c:	bf00      	nop
 800227e:	3750      	adds	r7, #80	; 0x50
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	40007000 	.word	0x40007000

0800228c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8002290:	2001      	movs	r0, #1
 8002292:	f7fe faa9 	bl	80007e8 <BSP_LED_On>
  while (1)
 8002296:	e7fe      	b.n	8002296 <Error_Handler+0xa>

08002298 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <HAL_UART_MspInit+0x9c>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	4a22      	ldr	r2, [pc, #136]	; (8002334 <HAL_UART_MspInit+0x9c>)
 80022aa:	f043 0308 	orr.w	r3, r3, #8
 80022ae:	6313      	str	r3, [r2, #48]	; 0x30
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <HAL_UART_MspInit+0x9c>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_UART_MspInit+0x9c>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_UART_MspInit+0x9c>)
 80022c6:	f043 0308 	orr.w	r3, r3, #8
 80022ca:	6313      	str	r3, [r2, #48]	; 0x30
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_UART_MspInit+0x9c>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_UART_MspInit+0x9c>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	4a14      	ldr	r2, [pc, #80]	; (8002334 <HAL_UART_MspInit+0x9c>)
 80022e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e6:	6413      	str	r3, [r2, #64]	; 0x40
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_UART_MspInit+0x9c>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80022f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80022fe:	2301      	movs	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002306:	2307      	movs	r3, #7
 8002308:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	4809      	ldr	r0, [pc, #36]	; (8002338 <HAL_UART_MspInit+0xa0>)
 8002312:	f7fe fceb 	bl	8000cec <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800231c:	2307      	movs	r3, #7
 800231e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	4804      	ldr	r0, [pc, #16]	; (8002338 <HAL_UART_MspInit+0xa0>)
 8002328:	f7fe fce0 	bl	8000cec <HAL_GPIO_Init>
}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	; 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	40020c00 	.word	0x40020c00

0800233c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800233c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002374 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002340:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002342:	e003      	b.n	800234c <LoopCopyDataInit>

08002344 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002346:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002348:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800234a:	3104      	adds	r1, #4

0800234c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800234c:	480b      	ldr	r0, [pc, #44]	; (800237c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002350:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002352:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002354:	d3f6      	bcc.n	8002344 <CopyDataInit>
  ldr  r2, =_sbss
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002358:	e002      	b.n	8002360 <LoopFillZerobss>

0800235a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800235a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800235c:	f842 3b04 	str.w	r3, [r2], #4

08002360 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002362:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002364:	d3f9      	bcc.n	800235a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002366:	f7fe fadf 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800236a:	f000 f811 	bl	8002390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800236e:	f7ff fe95 	bl	800209c <main>
  bx  lr    
 8002372:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002374:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002378:	080024e8 	.word	0x080024e8
  ldr  r0, =_sdata
 800237c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002380:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8002384:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8002388:	200000b4 	.word	0x200000b4

0800238c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800238c:	e7fe      	b.n	800238c <ADC_IRQHandler>
	...

08002390 <__libc_init_array>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	4d0d      	ldr	r5, [pc, #52]	; (80023c8 <__libc_init_array+0x38>)
 8002394:	4c0d      	ldr	r4, [pc, #52]	; (80023cc <__libc_init_array+0x3c>)
 8002396:	1b64      	subs	r4, r4, r5
 8002398:	10a4      	asrs	r4, r4, #2
 800239a:	2600      	movs	r6, #0
 800239c:	42a6      	cmp	r6, r4
 800239e:	d109      	bne.n	80023b4 <__libc_init_array+0x24>
 80023a0:	4d0b      	ldr	r5, [pc, #44]	; (80023d0 <__libc_init_array+0x40>)
 80023a2:	4c0c      	ldr	r4, [pc, #48]	; (80023d4 <__libc_init_array+0x44>)
 80023a4:	f000 f818 	bl	80023d8 <_init>
 80023a8:	1b64      	subs	r4, r4, r5
 80023aa:	10a4      	asrs	r4, r4, #2
 80023ac:	2600      	movs	r6, #0
 80023ae:	42a6      	cmp	r6, r4
 80023b0:	d105      	bne.n	80023be <__libc_init_array+0x2e>
 80023b2:	bd70      	pop	{r4, r5, r6, pc}
 80023b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b8:	4798      	blx	r3
 80023ba:	3601      	adds	r6, #1
 80023bc:	e7ee      	b.n	800239c <__libc_init_array+0xc>
 80023be:	f855 3b04 	ldr.w	r3, [r5], #4
 80023c2:	4798      	blx	r3
 80023c4:	3601      	adds	r6, #1
 80023c6:	e7f2      	b.n	80023ae <__libc_init_array+0x1e>
 80023c8:	080024e0 	.word	0x080024e0
 80023cc:	080024e0 	.word	0x080024e0
 80023d0:	080024e0 	.word	0x080024e0
 80023d4:	080024e4 	.word	0x080024e4

080023d8 <_init>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	bf00      	nop
 80023dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023de:	bc08      	pop	{r3}
 80023e0:	469e      	mov	lr, r3
 80023e2:	4770      	bx	lr

080023e4 <_fini>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	bf00      	nop
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr
